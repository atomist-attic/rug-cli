/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { TreeNode, GraphNode, FormatInfo, PathExpressionEngine } from "@atomist/rug/tree/PathExpression";
import { ProjectContext } from "@atomist/rug/operations/ProjectEditor";

export { PomMutableViewNonMutatingFunctions };

/*
 * PomMutableViewNonMutatingFunctions
 */
interface PomMutableViewNonMutatingFunctions {

    /**
      * Return the content of the artifactId element
      *
      * @returns {string}
      */
    artifactId(): string;

    /**
      * Return the value of a dependency's scope as specified by artifactId
      *
      * @param groupId {string} The groupId of the dependency you are looking to inspect
      * @param artifactId {string} The artifactId of the dependency you are looking to inspect
      * @returns {string}
      */
    dependencyScope(groupId: string, artifactId: string): string;

    /**
      * Return the value of a dependency's version as specified by artifactId
      *
      * @param groupId {string} The groupId of the dependency you are looking to inspect
      * @param artifactId {string} The artifactId of the dependency you are looking to inspect
      * @returns {string}
      */
    dependencyVersion(groupId: string, artifactId: string): string;

    /**
      * Return the content of the description element
      *
      * @returns {string}
      */
    description(): string;

    /**
      * Return the content of the groupId element
      *
      * @returns {string}
      */
    groupId(): string;

    /**
      * Return whether a build plugin management plugin is present as specified by artifactId and groupId
      *
      * @param groupId {string} The groupId of the build plugin management plugin you are looking to test the presence of
      * @param artifactId {string} The artifactId of the build plugin management plugin you are looking to test the presence of
      * @returns {boolean}
      */
    isBuildPluginManagementPresent(groupId: string, artifactId: string): boolean;

    /**
      * Return whether a build plugin is present as specified by artifactId and groupId
      *
      * @param groupId {string} The groupId of the build plugin you are looking to test the presence of
      * @param artifactId {string} The artifactId of the build plugin you are looking to test the presence of
      * @returns {boolean}
      */
    isBuildPluginPresent(groupId: string, artifactId: string): boolean;

    /**
      * Return whether a dependency management dependency is present as specified by artifactId and groupId
      *
      * @param groupId {string} The groupId of the dependency management dependency you are looking to test the presence of
      * @param artifactId {string} The artifactId of the dependency management dependency you are looking to test the presence of
      * @returns {boolean}
      */
    isDependencyManagementDependencyPresent(groupId: string, artifactId: string): boolean;

    /**
      * Return whether a dependency is present as specified by artifactId and groupId
      *
      * @param groupId {string} The groupId of the dependency you are looking to test the presence of
      * @param artifactId {string} The artifactId of the dependency you are looking to test the presence of
      * @returns {boolean}
      */
    isDependencyPresent(groupId: string, artifactId: string): boolean;

    /**
      * Return the content of the name element
      *
      * @returns {string}
      */
    name(): string;

    /**
      * Return the content of the packaging element
      *
      * @returns {string}
      */
    packaging(): string;

    /**
      * Return the content of the parent artifactId
      *
      * @returns {string}
      */
    parentArtifactId(): string;

    /**
      * Return the content of the parent groupId
      *
      * @returns {string}
      */
    parentGroupId(): string;

    /**
      * Return the content of the parent version
      *
      * @returns {string}
      */
    parentVersion(): string;

    /**
      * Return the value of a project property
      *
      * @param projectPropertyName {string} The project property you are looking to inspect
      * @returns {string}
      */
    property(projectPropertyName: string): string;

    /**
      * Return the content of the version element
      *
      * @returns {string}
      */
    version(): string;

}   

