/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {TreeNode,FormatInfo,PathExpressionEngine} from '../tree/PathExpression'
import {ProjectContext} from '../operations/ProjectEditor' 


/*
 * XML
 */
interface Xml extends TreeNode {

    /**
      * Add the specified content under the indicated xpath-selected node
      *
      * @param xpath {string} The XPath selector for the node to add the content under
      * @param newNode {string} The new node name to be added as a child
      * @param nodeContent {string} XML document to be added under the indicated node
      */
    addChildNode(xpath: string, newNode: string, nodeContent: string): void

    /**
      * Adds or replaces a node
      *
      * @param parentNodeXPath {string} The XPath selector for the parent node
      * @param xPathOfNodeToReplace {string} The XPath selector for the node to replace
      * @param newNode {string} The name of the node being placed
      * @param nodeContent {string} The content of the node being placed
      */
    addOrReplaceNode(parentNodeXPath: string, xPathOfNodeToReplace: string, newNode: string, nodeContent: string): void

    /**
      * Children
      *
      * @returns {any[]}
      */
    children(): any[]

    /**
      * Tests whether a node matching the given xpath expression is present
      *
      * @param xpath {string} The XPath to test against for the presence of a node
      * @returns {boolean}
      */
    contains(xpath: string): boolean

    /**
      * Return file content
      *
      * @returns {string}
      */
    content(): string

    /**
      * Deletes the specified node
      *
      * @param xpath {string} The XPath to the node to delete
      */
    deleteNode(xpath: string): void

    /**
      * Cause the operation to fail with a fatal error
      *
      * @param msg {string} The message to be displayed
      */
    fail(msg: string): void

    /**
      * Return file name, excluding path
      *
      * @returns {string}
      */
    filename(): string

    /**
      * Get the text content for a specific xpath expression
      *
      * @param xpath {string} The XPath to use to retrieve the test content
      * @returns {string}
      */
    getTextContentFor(xpath: string): string

    /**
      * Is this file well-formed?
      *
      * @returns {boolean}
      */
    isWellFormed(): boolean

    /**
      * Return the number of lines in the file
      *
      * @returns {number}
      */
    lineCount(): number

    /**
      * Make the file executable
      *
      */
    makeExecutable(): void

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeTags(): string[]

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeType(): string[]

    /**
      * Return file path, with forward slashes
      *
      * @returns {string}
      */
    path(): string

    /**
      * Return the file's permissions
      *
      * @returns {number}
      */
    permissions(): number

    /**
      * Cause the editor to print to the console. Useful for debugging if running editors locally.
      *
      * @param msg {string} The message to be displayed
      */
    println(msg: string): void

    /**
      * Set the text content for a specific xpath expression
      *
      * @param xpath {string} The XPath to use to set the test content
      * @param newContent {string} New text content for the XPath
      */
    setTextContentFor(xpath: string, newContent: string): void

    /**
      * Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /
      *
      * @param root {string} The root path to begin searching from
      * @returns {boolean}
      */
    underPath(root: string): boolean

}   

export {Xml}
