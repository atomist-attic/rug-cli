"use strict";
var Respondable = (function () {
    function Respondable() {
    }
    return Respondable;
}());
exports.Respondable = Respondable;
var Presentable = (function () {
    function Presentable() {
    }
    return Presentable;
}());
exports.Presentable = Presentable;
var Status;
(function (Status) {
    Status[Status["failure"] = 0] = "failure";
    Status[Status["success"] = 1] = "success";
})(Status || (Status = {}));
/**
A bunch of stuff to do asynchronously
Messages got to the bot.
Rugs are run straight away
*/
var Plan = (function () {
    function Plan() {
        this.messages = [];
        this.instructions = [];
    }
    Plan.prototype.add = function (thing) {
        if (thing instanceof Message) {
            this.messages.push(thing);
        }
        else {
            this.instructions.push(thing);
        }
        return this;
    };
    return Plan;
}());
exports.Plan = Plan;
/**
Represents a Message to the bot.
Any rugs can contain unbound parameters, and the bot will try to fill them out
*/
var Message = (function () {
    function Message(about) {
        this.instructions = [];
        if (typeof about == 'string') {
            this.text = about;
        }
        else {
            this.body = about;
        }
    }
    Message.prototype.addAction = function (instruction) {
        this.instructions.push(instruction);
        return this;
    };
    return Message;
}());
exports.Message = Message;
var MappedParameters = (function () {
    function MappedParameters() {
    }
    return MappedParameters;
}());
MappedParameters.REPO_OWNER = "atomist/owner";
MappedParameters.REPOSITORY = "atomist/repository";
MappedParameters.REPO_USER_TOKEN = "atomist/github/user_token=repo";
exports.MappedParameters = MappedParameters;
