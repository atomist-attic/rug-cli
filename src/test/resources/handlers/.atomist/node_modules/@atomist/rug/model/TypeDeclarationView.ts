/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { TreeNode, GraphNode, FormatInfo, PathExpressionEngine } from "@atomist/rug/tree/PathExpression";
import { ProjectContext } from "@atomist/rug/operations/ProjectEditor";
import { BodyDeclarationView } from "./BodyDeclarationView";
export { TypeDeclarationView };

/*
 * TypeDeclarationView
 */
interface TypeDeclarationView extends BodyDeclarationView {

    /**
      * Move the type to the given package
      *
      * @param newPackage {string} The package to move the type to
      */
    movePackage(newPackage: string): void;

    /**
      * Return the name of the type
      *
      * @returns {string}
      */
    name(): string;

    /**
      * Return the package
      *
      * @returns {string}
      */
    pkg(): string;

    /**
      * Rename the type
      *
      * @param newName {string} The new name of the type
      */
    rename(newName: string): void;

    /**
      * Rename the type by replacing a pattern in the name
      *
      * @param target {string} The name of the type to replace
      * @param replacement {string} The replacement pattern
      */
    renameByReplace(target: string, replacement: string): void;

    /**
      * Add or replace header comment for this type
      *
      * @param comment {string} New header comment to set
      */
    setHeaderComment(comment: string): void;

}   

