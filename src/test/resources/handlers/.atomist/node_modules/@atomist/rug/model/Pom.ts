/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {TreeNode,FormatInfo,PathExpressionEngine} from '../tree/PathExpression'
import {ProjectContext} from '../operations/ProjectEditor' 


/*
 * POM XML file
 */
interface Pom extends TreeNode {

    /**
      * Add the specified content under the indicated xpath-selected node
      *
      * @param xpath {string} The XPath selector for the node to add the content under
      * @param newNode {string} The new node name to be added as a child
      * @param nodeContent {string} XML document to be added under the indicated node
      */
    addChildNode(xpath: string, newNode: string, nodeContent: string): void

    /**
      * Adds or replaces a build plugin
      *
      * @param groupId {string} The value of the build plugin's groupId
      * @param artifactId {string} The value of the build plugin's artifactId
      * @param pluginContent {string} The XML content for the plugin
      */
    addOrReplaceBuildPlugin(groupId: string, artifactId: string, pluginContent: string): void

    /**
      * Add or replace a dependency
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      * @param scope {string} The value of the dependency's scope
      */
    addOrReplaceDependency(groupId: string, artifactId: string, scope: string): void

    /**
      * Add or replace a dependency
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      */
    addOrReplaceDependency(groupId: string, artifactId: string): void

    /**
      * Adds or replaces a dependency management dependency
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      * @param dependencyContent {string} The XML content for the dependency
      */
    addOrReplaceDependencyManagementDependency(groupId: string, artifactId: string, dependencyContent: string): void

    /**
      * Add or replace a dependency, providing version and scope
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      * @param newVersion {string} The value of the dependency's version to be set
      * @param scope {string} The value of the dependency's scope to be set
      */
    addOrReplaceDependencyOfVersion(groupId: string, artifactId: string, newVersion: string, scope: string): void

    /**
      * Add or replace a dependency, providing version and scope
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      * @param newVersion {string} The value of the dependency's version to be set
      */
    addOrReplaceDependencyOfVersion(groupId: string, artifactId: string, newVersion: string): void

    /**
      * Add or replace a dependency's scope
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      * @param newScope {string} The new value of the dependency's scope to be set
      */
    addOrReplaceDependencyScope(groupId: string, artifactId: string, newScope: string): void

    /**
      * Add or replace a dependency's version
      *
      * @param groupId {string} The value of dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      * @param newVersion {string} The value of the dependency's version to be set
      */
    addOrReplaceDependencyVersion(groupId: string, artifactId: string, newVersion: string): void

    /**
      * Adds or replaces a node
      *
      * @param parentNodeXPath {string} The XPath selector for the parent node
      * @param xPathOfNodeToReplace {string} The XPath selector for the node to replace
      * @param newNode {string} The name of the node being placed
      * @param nodeContent {string} The content of the node being placed
      */
    addOrReplaceNode(parentNodeXPath: string, xPathOfNodeToReplace: string, newNode: string, nodeContent: string): void

    /**
      * Add or replace a property
      *
      * @param propertyName {string} The name of the property being set
      * @param propertyValue {string} The value of the property being set
      */
    addOrReplaceProperty(propertyName: string, propertyValue: string): void

    /**
      * Return the content of the artifactId element
      *
      * @returns {string}
      */
    artifactId(): string

    /**
      * Children
      *
      * @returns {any[]}
      */
    children(): any[]

    /**
      * Tests whether a node matching the given xpath expression is present
      *
      * @param xpath {string} The XPath to test against for the presence of a node
      * @returns {boolean}
      */
    contains(xpath: string): boolean

    /**
      * Return file content
      *
      * @returns {string}
      */
    content(): string

    /**
      * Deletes the specified node
      *
      * @param xpath {string} The XPath to the node to delete
      */
    deleteNode(xpath: string): void

    /**
      * Return the value of a dependency's scope as specified by artifactId
      *
      * @param groupId {string} The groupId of the dependency you are looking to inspect
      * @param artifactId {string} The artifactId of the dependency you are looking to inspect
      * @returns {string}
      */
    dependencyScope(groupId: string, artifactId: string): string

    /**
      * Return the value of a dependency's version as specified by artifactId
      *
      * @param groupId {string} The groupId of the dependency you are looking to inspect
      * @param artifactId {string} The artifactId of the dependency you are looking to inspect
      * @returns {string}
      */
    dependencyVersion(groupId: string, artifactId: string): string

    /**
      * Return the content of the description element
      *
      * @returns {string}
      */
    description(): string

    /**
      * Cause the operation to fail with a fatal error
      *
      * @param msg {string} The message to be displayed
      */
    fail(msg: string): void

    /**
      * Return file name, excluding path
      *
      * @returns {string}
      */
    filename(): string

    /**
      * Get the text content for a specific xpath expression
      *
      * @param xpath {string} The XPath to use to retrieve the test content
      * @returns {string}
      */
    getTextContentFor(xpath: string): string

    /**
      * Return the content of the groupId element
      *
      * @returns {string}
      */
    groupId(): string

    /**
      * Return whether a build plugin is present as specified by artifactId and groupId
      *
      * @param groupId {string} The groupId of the build plugin you are looking to test the presence of
      * @param artifactId {string} The artifactId of the build plugin you are looking to test the presence of
      * @returns {boolean}
      */
    isBuildPluginPresent(groupId: string, artifactId: string): boolean

    /**
      * Return whether a dependency management dependency is present as specified by artifactId and groupId
      *
      * @param groupId {string} The groupId of the dependency management dependency you are looking to test the presence of
      * @param artifactId {string} The artifactId of the dependency management dependency you are looking to test the presence of
      * @returns {boolean}
      */
    isDependencyManagementDependencyPresent(groupId: string, artifactId: string): boolean

    /**
      * Return whether a dependency is present as specified by artifactId and groupId
      *
      * @param groupId {string} The groupId of the dependency you are looking to test the presence of
      * @param artifactId {string} The artifactId of the dependency you are looking to test the presence of
      * @returns {boolean}
      */
    isDependencyPresent(groupId: string, artifactId: string): boolean

    /**
      * Is this file well-formed?
      *
      * @returns {boolean}
      */
    isWellFormed(): boolean

    /**
      * Return the number of lines in the file
      *
      * @returns {number}
      */
    lineCount(): number

    /**
      * Make the file executable
      *
      */
    makeExecutable(): void

    /**
      * Return the content of the name element
      *
      * @returns {string}
      */
    name(): string

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeTags(): string[]

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeType(): string[]

    /**
      * Return the content of the packaging element
      *
      * @returns {string}
      */
    packaging(): string

    /**
      * Return the content of the parent artifactId
      *
      * @returns {string}
      */
    parentArtifactId(): string

    /**
      * Return the content of the parent groupId
      *
      * @returns {string}
      */
    parentGroupId(): string

    /**
      * Return the content of the parent version
      *
      * @returns {string}
      */
    parentVersion(): string

    /**
      * Return file path, with forward slashes
      *
      * @returns {string}
      */
    path(): string

    /**
      * Return the file's permissions
      *
      * @returns {number}
      */
    permissions(): number

    /**
      * Cause the editor to print to the console. Useful for debugging if running editors locally.
      *
      * @param msg {string} The message to be displayed
      */
    println(msg: string): void

    /**
      * Return the value of a project property
      *
      * @param projectPropertyName {string} The project property you are looking to inspect
      * @returns {string}
      */
    property(projectPropertyName: string): string

    /**
      * Removes a dependency
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      */
    removeDependency(groupId: string, artifactId: string): void

    /**
      * Remove a dependency's scope
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      */
    removeDependencyScope(groupId: string, artifactId: string): void

    /**
      * Remove a dependency's version
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      */
    removeDependencyVersion(groupId: string, artifactId: string): void

    /**
      * Remove a property
      *
      * @param propertyName {string} The name of the project property being deleted
      */
    removeProperty(propertyName: string): void

    /**
      * Set the content of the parent block
      *
      * @param newParentBlock {string} The parent block that you are trying to set
      */
    replaceParent(newParentBlock: string): void

    /**
      * Set the content of the artifactId element
      *
      * @param newArtifactId {string} The artifactId that you are trying to set
      */
    setArtifactId(newArtifactId: string): void

    /**
      * Set the content of the description element
      *
      * @param newDescription {string} The description that you are trying to set
      */
    setDescription(newDescription: string): void

    /**
      * Set the content of the groupId element
      *
      * @param newGroupId {string} The groupId that you are trying to set
      */
    setGroupId(newGroupId: string): void

    /**
      * Set the content of the packaging element
      *
      * @param newPackaging {string} The packaging that you are trying to set
      */
    setPackaging(newPackaging: string): void

    /**
      * Set the content of the parent artifactId element
      *
      * @param newParentArtifactId {string} The parent artifactId that you are trying to set
      */
    setParentArtifactId(newParentArtifactId: string): void

    /**
      * Set the content of the parent groupId element
      *
      * @param newParentGroupId {string} The parent groupId that you are trying to set
      */
    setParentGroupId(newParentGroupId: string): void

    /**
      * Set the content of the parent version element
      *
      * @param newParentVersion {string} The parent version that you are trying to set
      */
    setParentVersion(newParentVersion: string): void

    /**
      * Add or replace project name
      *
      * @param newName {string} The name being set
      */
    setProjectName(newName: string): void

    /**
      * Set the text content for a specific xpath expression
      *
      * @param xpath {string} The XPath to use to set the test content
      * @param newContent {string} New text content for the XPath
      */
    setTextContentFor(xpath: string, newContent: string): void

    /**
      * Set the content of the version element
      *
      * @param newVersion {string} The version that you are trying to set
      */
    setVersion(newVersion: string): void

    /**
      * Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /
      *
      * @param root {string} The root path to begin searching from
      * @returns {boolean}
      */
    underPath(root: string): boolean

    /**
      * Return the content of the version element
      *
      * @returns {string}
      */
    version(): string

}   

export {Pom}
