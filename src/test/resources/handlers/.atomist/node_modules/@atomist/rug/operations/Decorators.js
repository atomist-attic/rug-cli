"use strict";
//used by annotation functions
function set_metadata(obj, key, value) {
    Object.defineProperty(obj, key, { value: value, writable: false, enumerable: true });
}
function get_metadata(obj, key) {
    var desc = Object.getOwnPropertyDescriptor(obj, key);
    if ((desc == null || desc == undefined) && (obj.prototype != undefined)) {
        desc = Object.getOwnPropertyDescriptor(obj.prototype, key);
    }
    if (desc != null || desc != undefined) {
        return desc.value;
    }
    return null;
}
/**
* Decorator for parameters. Adds to object properties
*/
function Parameter(details) {
    return function (target, propertyKey) {
        var params = get_metadata(target, "__parameters");
        if (params == null) {
            params = [];
        }
        details["name"] = propertyKey;
        details["decorated"] = true;
        params.push(details);
        set_metadata(target, "__parameters", params);
    };
}
exports.Parameter = Parameter;
/**
* Map a local field to some other cnofiguration item in a different system
**/
function MappedParameter(foreignKey) {
    return function (target, localKey) {
        var params = get_metadata(target, "__mappedParameters");
        if (params == null) {
            params = [];
        }
        var param = { localKey: localKey, foreignKey: foreignKey };
        params.push(param);
        set_metadata(target, "__mappedParameters", params);
    };
}
exports.MappedParameter = MappedParameter;
/**
* Decorator for editors. Use this intead of implementing the editor interface.
*/
function ruglike(fn, kind, msg) {
    return function (name, description) {
        return function (ctr) {
            if (typeof ctr.prototype[fn] !== "function") {
                throw new Error("" + msg);
            }
            ctr.prototype["__name"] = name;
            ctr.prototype["__description"] = description;
            ctr.prototype["__kind"] = kind;
        };
    };
}
var Generator = ruglike("populate", "generator", "populate must be a function with first parameter = Project");
exports.Generator = Generator;
var Reviewer = ruglike("review", "reviewer", "review must be a function with first parameter = Project");
exports.Reviewer = Reviewer;
var Editor = ruglike("edit", "editor", "edit must be a function with first parameter = Project");
exports.Editor = Editor;
var CommandHandler = ruglike("handle", "command-handler", "handle must be a function with first parameter = HandlerContext");
exports.CommandHandler = CommandHandler;
var ResponseHandler = ruglike("handle", "response-handler", "handle must be a function with first parameter = Response<T>");
exports.ResponseHandler = ResponseHandler;
var EventHandler = function (name, description, expression) {
    return function (ctr) {
        if (typeof ctr.prototype["handle"] !== "function") {
            throw new Error("handle must be a function with first parameter = Match<R,N>");
        }
        ctr.prototype["__name"] = name;
        ctr.prototype["__description"] = description;
        ctr.prototype["__kind"] = "event-handler";
        if (typeof expression == 'string') {
            ctr.prototype["__expression"] = expression;
        }
        else {
            ctr.prototype["__expression"] = expression.expression;
        }
    };
};
exports.EventHandler = EventHandler;
/**
* Decorator for tags. Sets tags on the class
*/
function Tags() {
    var tags = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        tags[_i] = arguments[_i];
    }
    return function (target) {
        target.prototype["__tags"] = tags;
    };
}
exports.Tags = Tags;
function Intent() {
    var intent = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        intent[_i] = arguments[_i];
    }
    return function (target) {
        target.prototype["__intent"] = intent;
    };
}
exports.Intent = Intent;
function Secrets() {
    var secrets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        secrets[_i] = arguments[_i];
    }
    return function (target) {
        if (target.prototype["__secrets"] == null) {
            target.prototype["__secrets"] = [];
        }
        target.prototype["__secrets"] = target.prototype["__secrets"].concat(secrets);
    };
}
exports.Secrets = Secrets;
//for parameters to ResponseHandlers to do response body coercion
function ParseJson(target, propertyKey, parameterIndex) {
    set_metadata(target, "__coercion", "JSON");
}
exports.ParseJson = ParseJson;
