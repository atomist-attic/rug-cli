/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { TreeNode, GraphNode, FormatInfo, PathExpressionEngine } from "@atomist/rug/tree/PathExpression";
import { ProjectContext } from "@atomist/rug/operations/ProjectEditor";

export { BuildViewMutatingFunctions };

/*
 * BuildViewMutatingFunctions
 */
interface BuildViewMutatingFunctions {

    /**
      * Add or replace a dependency
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      */
    addOrReplaceDependency(groupId: string, artifactId: string): void;

    /**
      * Add or replace a dependency, providing version
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      * @param newVersion {string} The value of the dependency's version to be set
      */
    addOrReplaceDependencyOfVersion(groupId: string, artifactId: string, newVersion: string): void;

    /**
      * Add or replace a dependency's version
      *
      * @param groupId {string} The value of dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      * @param newVersion {string} The value of the dependency's version to be set
      */
    addOrReplaceDependencyVersion(groupId: string, artifactId: string, newVersion: string): void;

    /**
      * Add or replace a property
      *
      * @param propertyName {string} The name of the property being set
      * @param propertyValue {string} The value of the property being set
      */
    addOrReplaceProperty(propertyName: string, propertyValue: string): void;

    /**
      * Removes a dependency
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      */
    removeDependency(groupId: string, artifactId: string): void;

    /**
      * Remove a dependency's version
      *
      * @param groupId {string} The value of the dependency's groupId
      * @param artifactId {string} The value of the dependency's artifactId
      */
    removeDependencyVersion(groupId: string, artifactId: string): void;

    /**
      * Remove a property
      *
      * @param propertyName {string} The name of the project property being deleted
      */
    removeProperty(propertyName: string): void;

    /**
      * Set the content of the artifactId element
      *
      * @param newArtifactId {string} The artifactId that you are trying to set
      */
    setArtifactId(newArtifactId: string): void;

    /**
      * Set the content of the description element
      *
      * @param newDescription {string} The description that you are trying to set
      */
    setDescription(newDescription: string): void;

    /**
      * Set the content of the groupId element
      *
      * @param newGroupId {string} The groupId that you are trying to set
      */
    setGroupId(newGroupId: string): void;

    /**
      * Add or replace project name
      *
      * @param newName {string} The name being set
      */
    setProjectName(newName: string): void;

    /**
      * Set the content of the version element
      *
      * @param newVersion {string} The version that you are trying to set
      */
    setVersion(newVersion: string): void;

}   

