/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../Container";
import { Spec } from "./Spec";
import { Tag } from "./Tag";
export { Container };

/*
 * Type Container
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class Container implements api.Container {

    private _image: string;
    private _isTagged: Tag;
    private _referencedBy: Spec;

    nodeName(): string {
        return "Container";
    }

    nodeTags(): string[] {
        return [ "Container", "-dynamic" ];
    }

    /**
      * String
      *
      * @returns {string}
      */
    image(): string {
        return this._image;
    }

    withImage(image: string): Container {
        this._image = image;
        return this;
    }

    /**
      * isTagged - Container -> Tag
      *
      * @returns {Tag}
      */
    isTagged(): Tag {
        return this._isTagged;
    }

    withIsTagged(isTagged: Tag): Container {
        this._isTagged = isTagged;
        return this;
    }

    /**
      * referencedBy - Container -> Spec
      *
      * @returns {Spec}
      */
    referencedBy(): Spec {
        return this._referencedBy;
    }

    withReferencedBy(referencedBy: Spec): Container {
        this._referencedBy = referencedBy;
        return this;
    }

}   

