/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/*
 * Type Comment
 *
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
var Comment = (function () {
    function Comment() {
    }
    Comment.prototype.nodeName = function () {
        return "Comment";
    };
    Comment.prototype.nodeTags = function () {
        return ["Comment", "-dynamic"];
    };
    /**
      * String
      *
      * @returns {string}
      */
    Comment.prototype.body = function () {
        return this._body;
    };
    Comment.prototype.withBody = function (body) {
        this._body = body;
        return this;
    };
    /**
      * by - Comment -> GitHubId
      *
      * @returns {GitHubId}
      */
    Comment.prototype.by = function () {
        return this._by;
    };
    Comment.prototype.withBy = function (by) {
        this._by = by;
        return this;
    };
    /**
      * commentOn - Comment -> PullRequest
      *
      * @returns {PullRequest}
      */
    Comment.prototype.commentOn = function () {
        return this._commentOn;
    };
    Comment.prototype.withCommentOn = function (commentOn) {
        this._commentOn = commentOn;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Comment.prototype.id = function () {
        return this._id;
    };
    Comment.prototype.withId = function (id) {
        this._id = id;
        return this;
    };
    /**
      * on - Comment -> Issue
      *
      * @returns {Issue}
      */
    Comment.prototype.on = function () {
        return this._on;
    };
    Comment.prototype.withOn = function (on) {
        this._on = on;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Comment.prototype.timestamp = function () {
        return this._timestamp;
    };
    Comment.prototype.withTimestamp = function (timestamp) {
        this._timestamp = timestamp;
        return this;
    };
    return Comment;
}());
exports.Comment = Comment;
