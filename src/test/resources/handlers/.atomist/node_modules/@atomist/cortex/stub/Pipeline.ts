/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../Pipeline";
import { Build } from "./Build";
import { Commit } from "./Commit";
import { Stage } from "./Stage";
export { Pipeline };

/*
 * Type Pipeline
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class Pipeline implements api.Pipeline {

    private _application: string;
    private _eventType: string;
    private _executionId: string;
    private _has: Stage[];
    private _runs: Build[];
    private _stageName: string;
    private _stageType: string;
    private _taskName: string;
    private _triggeredBy: Commit;
    private _waitingForJudgement: boolean;

    nodeName(): string {
        return "Pipeline";
    }

    nodeTags(): string[] {
        return [ "Pipeline", "-dynamic" ];
    }

    /**
      * String
      *
      * @returns {string}
      */
    application(): string {
        return this._application;
    }

    withApplication(application: string): Pipeline {
        this._application = application;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    eventType(): string {
        return this._eventType;
    }

    withEventType(eventType: string): Pipeline {
        this._eventType = eventType;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    executionId(): string {
        return this._executionId;
    }

    withExecutionId(executionId: string): Pipeline {
        this._executionId = executionId;
        return this;
    }

    /**
      * has - Pipeline -> Stage
      *
      * @returns {Stage[]}
      */
    has(): Stage[] {
        return this._has;
    }

    withHas(has: Stage[]): Pipeline {
        this._has = has;
        return this;
    }

    /**
      * runs - Pipeline -> Build
      *
      * @returns {Build[]}
      */
    runs(): Build[] {
        return this._runs;
    }

    withRuns(runs: Build[]): Pipeline {
        this._runs = runs;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    stageName(): string {
        return this._stageName;
    }

    withStageName(stageName: string): Pipeline {
        this._stageName = stageName;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    stageType(): string {
        return this._stageType;
    }

    withStageType(stageType: string): Pipeline {
        this._stageType = stageType;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    taskName(): string {
        return this._taskName;
    }

    withTaskName(taskName: string): Pipeline {
        this._taskName = taskName;
        return this;
    }

    /**
      * triggeredBy - Pipeline -> Commit
      *
      * @returns {Commit}
      */
    triggeredBy(): Commit {
        return this._triggeredBy;
    }

    withTriggeredBy(triggeredBy: Commit): Pipeline {
        this._triggeredBy = triggeredBy;
        return this;
    }

    /**
      * boolean
      *
      * @returns {boolean}
      */
    waitingForJudgement(): boolean {
        return this._waitingForJudgement;
    }

    withWaitingForJudgement(waitingForJudgement: boolean): Pipeline {
        this._waitingForJudgement = waitingForJudgement;
        return this;
    }

}   

