/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/*
 * Type Issue
 *
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
var Issue = (function () {
    function Issue() {
    }
    Issue.prototype.nodeName = function () {
        return "Issue";
    };
    Issue.prototype.nodeTags = function () {
        return ["Issue", "-dynamic"];
    };
    /**
      * String
      *
      * @returns {string}
      */
    Issue.prototype.action = function () {
        return this._action;
    };
    Issue.prototype.withAction = function (action) {
        this._action = action;
        return this;
    };
    /**
      * assigned - Issue -> GitHubId
      *
      * @returns {GitHubId[]}
      */
    Issue.prototype.assigned = function () {
        return this._assigned;
    };
    Issue.prototype.withAssigned = function (assigned) {
        this._assigned = assigned;
        return this;
    };
    /**
      * belongsTo - Issue -> Repo
      *
      * @returns {Repo}
      */
    Issue.prototype.belongsTo = function () {
        return this._belongsTo;
    };
    Issue.prototype.withBelongsTo = function (belongsTo) {
        this._belongsTo = belongsTo;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Issue.prototype.body = function () {
        return this._body;
    };
    Issue.prototype.withBody = function (body) {
        this._body = body;
        return this;
    };
    /**
      * by - Issue -> GitHubId
      *
      * @returns {GitHubId}
      */
    Issue.prototype.by = function () {
        return this._by;
    };
    Issue.prototype.withBy = function (by) {
        this._by = by;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Issue.prototype.closedAt = function () {
        return this._closedAt;
    };
    Issue.prototype.withClosedAt = function (closedAt) {
        this._closedAt = closedAt;
        return this;
    };
    /**
      * closedBy - Issue -> GitHubId
      *
      * @returns {GitHubId}
      */
    Issue.prototype.closedBy = function () {
        return this._closedBy;
    };
    Issue.prototype.withClosedBy = function (closedBy) {
        this._closedBy = closedBy;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Issue.prototype.createdAt = function () {
        return this._createdAt;
    };
    Issue.prototype.withCreatedAt = function (createdAt) {
        this._createdAt = createdAt;
        return this;
    };
    /**
      * hasComment - Issue -> Comment
      *
      * @returns {Comment[]}
      */
    Issue.prototype.hasComment = function () {
        return this._hasComment;
    };
    Issue.prototype.withHasComment = function (hasComment) {
        this._hasComment = hasComment;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Issue.prototype.id = function () {
        return this._id;
    };
    Issue.prototype.withId = function (id) {
        this._id = id;
        return this;
    };
    /**
      * labelled - Issue -> Label
      *
      * @returns {Label[]}
      */
    Issue.prototype.labelled = function () {
        return this._labelled;
    };
    Issue.prototype.withLabelled = function (labelled) {
        this._labelled = labelled;
        return this;
    };
    /**
      * long
      *
      * @returns {number}
      */
    Issue.prototype.number = function () {
        return this._number;
    };
    Issue.prototype.withNumber = function (number) {
        this._number = number;
        return this;
    };
    /**
      * resolvedBy - Issue -> Commit
      *
      * @returns {Commit[]}
      */
    Issue.prototype.resolvedBy = function () {
        return this._resolvedBy;
    };
    Issue.prototype.withResolvedBy = function (resolvedBy) {
        this._resolvedBy = resolvedBy;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Issue.prototype.state = function () {
        return this._state;
    };
    Issue.prototype.withState = function (state) {
        this._state = state;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Issue.prototype.timestamp = function () {
        return this._timestamp;
    };
    Issue.prototype.withTimestamp = function (timestamp) {
        this._timestamp = timestamp;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Issue.prototype.title = function () {
        return this._title;
    };
    Issue.prototype.withTitle = function (title) {
        this._title = title;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Issue.prototype.updatedAt = function () {
        return this._updatedAt;
    };
    Issue.prototype.withUpdatedAt = function (updatedAt) {
        this._updatedAt = updatedAt;
        return this;
    };
    return Issue;
}());
exports.Issue = Issue;
