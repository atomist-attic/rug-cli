/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/*
 * Type Pod
 *
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
var Pod = (function () {
    function Pod() {
    }
    Pod.prototype.nodeName = function () {
        return "Pod";
    };
    Pod.prototype.nodeTags = function () {
        return ["Pod", "-dynamic"];
    };
    /**
      * createdBy - Pod -> Spec
      *
      * @returns {Spec}
      */
    Pod.prototype.createdBy = function () {
        return this._createdBy;
    };
    Pod.prototype.withCreatedBy = function (createdBy) {
        this._createdBy = createdBy;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Pod.prototype.name = function () {
        return this._name;
    };
    Pod.prototype.withName = function (name) {
        this._name = name;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Pod.prototype.state = function () {
        return this._state;
    };
    Pod.prototype.withState = function (state) {
        this._state = state;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Pod.prototype.timestamp = function () {
        return this._timestamp;
    };
    Pod.prototype.withTimestamp = function (timestamp) {
        this._timestamp = timestamp;
        return this;
    };
    /**
      * uses - Pod -> Container
      *
      * @returns {Container}
      */
    Pod.prototype.uses = function () {
        return this._uses;
    };
    Pod.prototype.withUses = function (uses) {
        this._uses = uses;
        return this;
    };
    return Pod;
}());
exports.Pod = Pod;
