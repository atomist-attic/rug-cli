/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../Issue";
import { Comment } from "./Comment";
import { Commit } from "./Commit";
import { GitHubId } from "./GitHubId";
import { Label } from "./Label";
import { Repo } from "./Repo";
export { Issue };

/*
 * Type Issue
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class Issue implements api.Issue {

    private _action: string;
    private _assigned: GitHubId[];
    private _belongsTo: Repo;
    private _body: string;
    private _by: GitHubId;
    private _closedAt: string;
    private _closedBy: GitHubId;
    private _createdAt: string;
    private _hasComment: Comment[];
    private _id: string;
    private _labelled: Label[];
    private _number: number;
    private _resolvedBy: Commit[];
    private _state: string;
    private _timestamp: string;
    private _title: string;
    private _updatedAt: string;

    nodeName(): string {
        return "Issue";
    }

    nodeTags(): string[] {
        return [ "Issue", "-dynamic" ];
    }

    /**
      * String
      *
      * @returns {string}
      */
    action(): string {
        return this._action;
    }

    withAction(action: string): Issue {
        this._action = action;
        return this;
    }

    /**
      * assigned - Issue -> GitHubId
      *
      * @returns {GitHubId[]}
      */
    assigned(): GitHubId[] {
        return this._assigned;
    }

    withAssigned(assigned: GitHubId[]): Issue {
        this._assigned = assigned;
        return this;
    }

    /**
      * belongsTo - Issue -> Repo
      *
      * @returns {Repo}
      */
    belongsTo(): Repo {
        return this._belongsTo;
    }

    withBelongsTo(belongsTo: Repo): Issue {
        this._belongsTo = belongsTo;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    body(): string {
        return this._body;
    }

    withBody(body: string): Issue {
        this._body = body;
        return this;
    }

    /**
      * by - Issue -> GitHubId
      *
      * @returns {GitHubId}
      */
    by(): GitHubId {
        return this._by;
    }

    withBy(by: GitHubId): Issue {
        this._by = by;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    closedAt(): string {
        return this._closedAt;
    }

    withClosedAt(closedAt: string): Issue {
        this._closedAt = closedAt;
        return this;
    }

    /**
      * closedBy - Issue -> GitHubId
      *
      * @returns {GitHubId}
      */
    closedBy(): GitHubId {
        return this._closedBy;
    }

    withClosedBy(closedBy: GitHubId): Issue {
        this._closedBy = closedBy;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    createdAt(): string {
        return this._createdAt;
    }

    withCreatedAt(createdAt: string): Issue {
        this._createdAt = createdAt;
        return this;
    }

    /**
      * hasComment - Issue -> Comment
      *
      * @returns {Comment[]}
      */
    hasComment(): Comment[] {
        return this._hasComment;
    }

    withHasComment(hasComment: Comment[]): Issue {
        this._hasComment = hasComment;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    id(): string {
        return this._id;
    }

    withId(id: string): Issue {
        this._id = id;
        return this;
    }

    /**
      * labelled - Issue -> Label
      *
      * @returns {Label[]}
      */
    labelled(): Label[] {
        return this._labelled;
    }

    withLabelled(labelled: Label[]): Issue {
        this._labelled = labelled;
        return this;
    }

    /**
      * long
      *
      * @returns {number}
      */
    number(): number {
        return this._number;
    }

    withNumber(number: number): Issue {
        this._number = number;
        return this;
    }

    /**
      * resolvedBy - Issue -> Commit
      *
      * @returns {Commit[]}
      */
    resolvedBy(): Commit[] {
        return this._resolvedBy;
    }

    withResolvedBy(resolvedBy: Commit[]): Issue {
        this._resolvedBy = resolvedBy;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    state(): string {
        return this._state;
    }

    withState(state: string): Issue {
        this._state = state;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    timestamp(): string {
        return this._timestamp;
    }

    withTimestamp(timestamp: string): Issue {
        this._timestamp = timestamp;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    title(): string {
        return this._title;
    }

    withTitle(title: string): Issue {
        this._title = title;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    updatedAt(): string {
        return this._updatedAt;
    }

    withUpdatedAt(updatedAt: string): Issue {
        this._updatedAt = updatedAt;
        return this;
    }

}   

