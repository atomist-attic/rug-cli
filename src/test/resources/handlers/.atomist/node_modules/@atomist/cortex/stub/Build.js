/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/*
 * Type Build
 *
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
var Build = (function () {
    function Build() {
    }
    Build.prototype.nodeName = function () {
        return "Build";
    };
    Build.prototype.nodeTags = function () {
        return ["Build", "-dynamic"];
    };
    /**
      * String
      *
      * @returns {string}
      */
    Build.prototype.buildUrl = function () {
        return this._buildUrl;
    };
    Build.prototype.withBuildUrl = function (buildUrl) {
        this._buildUrl = buildUrl;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Build.prototype.compareUrl = function () {
        return this._compareUrl;
    };
    Build.prototype.withCompareUrl = function (compareUrl) {
        this._compareUrl = compareUrl;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Build.prototype.finishedAt = function () {
        return this._finishedAt;
    };
    Build.prototype.withFinishedAt = function (finishedAt) {
        this._finishedAt = finishedAt;
        return this;
    };
    /**
      * forPipeline - Build -> Pipeline
      *
      * @returns {Pipeline}
      */
    Build.prototype.forPipeline = function () {
        return this._forPipeline;
    };
    Build.prototype.withForPipeline = function (forPipeline) {
        this._forPipeline = forPipeline;
        return this;
    };
    /**
      * long
      *
      * @returns {number}
      */
    Build.prototype.id = function () {
        return this._id;
    };
    Build.prototype.withId = function (id) {
        this._id = id;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Build.prototype.name = function () {
        return this._name;
    };
    Build.prototype.withName = function (name) {
        this._name = name;
        return this;
    };
    /**
      * ofCommit - Build -> Commit
      *
      * @returns {Commit}
      */
    Build.prototype.ofCommit = function () {
        return this._ofCommit;
    };
    Build.prototype.withOfCommit = function (ofCommit) {
        this._ofCommit = ofCommit;
        return this;
    };
    /**
      * on - Build -> Repo
      *
      * @returns {Repo}
      */
    Build.prototype.on = function () {
        return this._on;
    };
    Build.prototype.withOn = function (on) {
        this._on = on;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Build.prototype.platform = function () {
        return this._platform;
    };
    Build.prototype.withPlatform = function (platform) {
        this._platform = platform;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Build.prototype.pullRequestNumber = function () {
        return this._pullRequestNumber;
    };
    Build.prototype.withPullRequestNumber = function (pullRequestNumber) {
        this._pullRequestNumber = pullRequestNumber;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Build.prototype.startedAt = function () {
        return this._startedAt;
    };
    Build.prototype.withStartedAt = function (startedAt) {
        this._startedAt = startedAt;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Build.prototype.status = function () {
        return this._status;
    };
    Build.prototype.withStatus = function (status) {
        this._status = status;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Build.prototype.timestamp = function () {
        return this._timestamp;
    };
    Build.prototype.withTimestamp = function (timestamp) {
        this._timestamp = timestamp;
        return this;
    };
    /**
      * triggeredBy - Build -> Push
      *
      * @returns {Push}
      */
    Build.prototype.triggeredBy = function () {
        return this._triggeredBy;
    };
    Build.prototype.withTriggeredBy = function (triggeredBy) {
        this._triggeredBy = triggeredBy;
        return this;
    };
    /**
      * triggeredByPr - Build -> PullRequest
      *
      * @returns {PullRequest}
      */
    Build.prototype.triggeredByPr = function () {
        return this._triggeredByPr;
    };
    Build.prototype.withTriggeredByPr = function (triggeredByPr) {
        this._triggeredByPr = triggeredByPr;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Build.prototype.type = function () {
        return this._type;
    };
    Build.prototype.withType = function (type) {
        this._type = type;
        return this;
    };
    return Build;
}());
exports.Build = Build;
