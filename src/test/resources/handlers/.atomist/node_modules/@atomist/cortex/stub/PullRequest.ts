/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../PullRequest";
import { Build } from "./Build";
import { Comment } from "./Comment";
import { Commit } from "./Commit";
import { GitHubId } from "./GitHubId";
import { Repo } from "./Repo";
export { PullRequest };

/*
 * Type PullRequest
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class PullRequest implements api.PullRequest {

    private _author: GitHubId;
    private _base: Commit;
    private _body: string;
    private _closedAt: string;
    private _contains: Commit[];
    private _createdAt: string;
    private _hasComment: Comment[];
    private _head: Commit;
    private _merged: boolean;
    private _mergedAt: string;
    private _mergedBy: GitHubId;
    private _number: string;
    private _on: Repo;
    private _state: string;
    private _timestamp: string;
    private _title: string;
    private _triggeredBuild: Build[];
    private _updatedAt: string;

    nodeName(): string {
        return "PullRequest";
    }

    nodeTags(): string[] {
        return [ "PullRequest", "-dynamic" ];
    }

    /**
      * author - PullRequest -> GitHubId
      *
      * @returns {GitHubId}
      */
    author(): GitHubId {
        return this._author;
    }

    withAuthor(author: GitHubId): PullRequest {
        this._author = author;
        return this;
    }

    /**
      * base - PullRequest -> Commit
      *
      * @returns {Commit}
      */
    base(): Commit {
        return this._base;
    }

    withBase(base: Commit): PullRequest {
        this._base = base;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    body(): string {
        return this._body;
    }

    withBody(body: string): PullRequest {
        this._body = body;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    closedAt(): string {
        return this._closedAt;
    }

    withClosedAt(closedAt: string): PullRequest {
        this._closedAt = closedAt;
        return this;
    }

    /**
      * contains - PullRequest -> Commit
      *
      * @returns {Commit[]}
      */
    contains(): Commit[] {
        return this._contains;
    }

    withContains(contains: Commit[]): PullRequest {
        this._contains = contains;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    createdAt(): string {
        return this._createdAt;
    }

    withCreatedAt(createdAt: string): PullRequest {
        this._createdAt = createdAt;
        return this;
    }

    /**
      * hasComment - PullRequest -> Comment
      *
      * @returns {Comment[]}
      */
    hasComment(): Comment[] {
        return this._hasComment;
    }

    withHasComment(hasComment: Comment[]): PullRequest {
        this._hasComment = hasComment;
        return this;
    }

    /**
      * head - PullRequest -> Commit
      *
      * @returns {Commit}
      */
    head(): Commit {
        return this._head;
    }

    withHead(head: Commit): PullRequest {
        this._head = head;
        return this;
    }

    /**
      * boolean
      *
      * @returns {boolean}
      */
    merged(): boolean {
        return this._merged;
    }

    withMerged(merged: boolean): PullRequest {
        this._merged = merged;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    mergedAt(): string {
        return this._mergedAt;
    }

    withMergedAt(mergedAt: string): PullRequest {
        this._mergedAt = mergedAt;
        return this;
    }

    /**
      * mergedBy - PullRequest -> GitHubId
      *
      * @returns {GitHubId}
      */
    mergedBy(): GitHubId {
        return this._mergedBy;
    }

    withMergedBy(mergedBy: GitHubId): PullRequest {
        this._mergedBy = mergedBy;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    number(): string {
        return this._number;
    }

    withNumber(number: string): PullRequest {
        this._number = number;
        return this;
    }

    /**
      * on - PullRequest -> Repo
      *
      * @returns {Repo}
      */
    on(): Repo {
        return this._on;
    }

    withOn(on: Repo): PullRequest {
        this._on = on;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    state(): string {
        return this._state;
    }

    withState(state: string): PullRequest {
        this._state = state;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    timestamp(): string {
        return this._timestamp;
    }

    withTimestamp(timestamp: string): PullRequest {
        this._timestamp = timestamp;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    title(): string {
        return this._title;
    }

    withTitle(title: string): PullRequest {
        this._title = title;
        return this;
    }

    /**
      * triggeredBuild - PullRequest -> Build
      *
      * @returns {Build[]}
      */
    triggeredBuild(): Build[] {
        return this._triggeredBuild;
    }

    withTriggeredBuild(triggeredBuild: Build[]): PullRequest {
        this._triggeredBuild = triggeredBuild;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    updatedAt(): string {
        return this._updatedAt;
    }

    withUpdatedAt(updatedAt: string): PullRequest {
        this._updatedAt = updatedAt;
        return this;
    }

}   

