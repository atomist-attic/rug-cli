/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/*
 * Type ChatId
 *
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
var ChatId = (function () {
    function ChatId() {
    }
    ChatId.prototype.nodeName = function () {
        return "ChatId";
    };
    ChatId.prototype.nodeTags = function () {
        return ["ChatId", "-dynamic"];
    };
    /**
      * String
      *
      * @returns {string}
      */
    ChatId.prototype.id = function () {
        return this._id;
    };
    ChatId.prototype.withId = function (id) {
        this._id = id;
        return this;
    };
    /**
      * memberOfChannel - ChatId -> ChatChannel
      *
      * @returns {ChatChannel[]}
      */
    ChatId.prototype.memberOfChannel = function () {
        return this._memberOfChannel;
    };
    ChatId.prototype.withMemberOfChannel = function (memberOfChannel) {
        this._memberOfChannel = memberOfChannel;
        return this;
    };
    /**
      * memberOfTeam - ChatId -> ChatTeam
      *
      * @returns {ChatTeam}
      */
    ChatId.prototype.memberOfTeam = function () {
        return this._memberOfTeam;
    };
    ChatId.prototype.withMemberOfTeam = function (memberOfTeam) {
        this._memberOfTeam = memberOfTeam;
        return this;
    };
    /**
      * of - ChatId -> Person
      *
      * @returns {Person}
      */
    ChatId.prototype.of = function () {
        return this._of;
    };
    ChatId.prototype.withOf = function (of) {
        this._of = of;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    ChatId.prototype.screenName = function () {
        return this._screenName;
    };
    ChatId.prototype.withScreenName = function (screenName) {
        this._screenName = screenName;
        return this;
    };
    return ChatId;
}());
exports.ChatId = ChatId;
