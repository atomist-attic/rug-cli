/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/*
 * Type Person
 *
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
var Person = (function () {
    function Person() {
    }
    Person.prototype.nodeName = function () {
        return "Person";
    };
    Person.prototype.nodeTags = function () {
        return ["Person", "-dynamic"];
    };
    /**
      * String
      *
      * @returns {string}
      */
    Person.prototype.forename = function () {
        return this._forename;
    };
    Person.prototype.withForename = function (forename) {
        this._forename = forename;
        return this;
    };
    /**
      * hasChatIdentity - Person -> ChatId
      *
      * @returns {ChatId}
      */
    Person.prototype.hasChatIdentity = function () {
        return this._hasChatIdentity;
    };
    Person.prototype.withHasChatIdentity = function (hasChatIdentity) {
        this._hasChatIdentity = hasChatIdentity;
        return this;
    };
    /**
      * hasEmail - Person -> Email
      *
      * @returns {Email[]}
      */
    Person.prototype.hasEmail = function () {
        return this._hasEmail;
    };
    Person.prototype.withHasEmail = function (hasEmail) {
        this._hasEmail = hasEmail;
        return this;
    };
    /**
      * hasGithubIdentity - Person -> GitHubId
      *
      * @returns {GitHubId}
      */
    Person.prototype.hasGithubIdentity = function () {
        return this._hasGithubIdentity;
    };
    Person.prototype.withHasGithubIdentity = function (hasGithubIdentity) {
        this._hasGithubIdentity = hasGithubIdentity;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Person.prototype.surname = function () {
        return this._surname;
    };
    Person.prototype.withSurname = function (surname) {
        this._surname = surname;
        return this;
    };
    return Person;
}());
exports.Person = Person;
