/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../ChatId";
import { ChatChannel } from "./ChatChannel";
import { ChatTeam } from "./ChatTeam";
import { Person } from "./Person";
export { ChatId };

/*
 * Type ChatId
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class ChatId implements api.ChatId {

    private _id: string;
    private _memberOfChannel: ChatChannel[];
    private _memberOfTeam: ChatTeam;
    private _of: Person;
    private _screenName: string;

    nodeName(): string {
        return "ChatId";
    }

    nodeTags(): string[] {
        return [ "ChatId", "-dynamic" ];
    }

    /**
      * String
      *
      * @returns {string}
      */
    id(): string {
        return this._id;
    }

    withId(id: string): ChatId {
        this._id = id;
        return this;
    }

    /**
      * memberOfChannel - ChatId -> ChatChannel
      *
      * @returns {ChatChannel[]}
      */
    memberOfChannel(): ChatChannel[] {
        return this._memberOfChannel;
    }

    withMemberOfChannel(memberOfChannel: ChatChannel[]): ChatId {
        this._memberOfChannel = memberOfChannel;
        return this;
    }

    /**
      * memberOfTeam - ChatId -> ChatTeam
      *
      * @returns {ChatTeam}
      */
    memberOfTeam(): ChatTeam {
        return this._memberOfTeam;
    }

    withMemberOfTeam(memberOfTeam: ChatTeam): ChatId {
        this._memberOfTeam = memberOfTeam;
        return this;
    }

    /**
      * of - ChatId -> Person
      *
      * @returns {Person}
      */
    of(): Person {
        return this._of;
    }

    withOf(of: Person): ChatId {
        this._of = of;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    screenName(): string {
        return this._screenName;
    }

    withScreenName(screenName: string): ChatId {
        this._screenName = screenName;
        return this;
    }

}   

