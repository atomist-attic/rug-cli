/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/*
 * Type Commit
 *
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
var Commit = (function () {
    function Commit() {
    }
    Commit.prototype.nodeName = function () {
        return "Commit";
    };
    Commit.prototype.nodeTags = function () {
        return ["Commit", "-dynamic"];
    };
    /**
      * author - Commit -> GitHubId
      *
      * @returns {GitHubId}
      */
    Commit.prototype.author = function () {
        return this._author;
    };
    Commit.prototype.withAuthor = function (author) {
        this._author = author;
        return this;
    };
    /**
      * committer - Commit -> GitHubId
      *
      * @returns {GitHubId}
      */
    Commit.prototype.committer = function () {
        return this._committer;
    };
    Commit.prototype.withCommitter = function (committer) {
        this._committer = committer;
        return this;
    };
    /**
      * deployedToHeroku - Commit -> Heroku
      *
      * @returns {Heroku}
      */
    Commit.prototype.deployedToHeroku = function () {
        return this._deployedToHeroku;
    };
    Commit.prototype.withDeployedToHeroku = function (deployedToHeroku) {
        this._deployedToHeroku = deployedToHeroku;
        return this;
    };
    /**
      * hasBuild - Commit -> Build
      *
      * @returns {Build[]}
      */
    Commit.prototype.hasBuild = function () {
        return this._hasBuild;
    };
    Commit.prototype.withHasBuild = function (hasBuild) {
        this._hasBuild = hasBuild;
        return this;
    };
    /**
      * includes - Commit -> Delta
      *
      * @returns {Delta[]}
      */
    Commit.prototype.includes = function () {
        return this._includes;
    };
    Commit.prototype.withIncludes = function (includes) {
        this._includes = includes;
        return this;
    };
    /**
      * isTagged - Commit -> Tag
      *
      * @returns {Tag[]}
      */
    Commit.prototype.isTagged = function () {
        return this._isTagged;
    };
    Commit.prototype.withIsTagged = function (isTagged) {
        this._isTagged = isTagged;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Commit.prototype.message = function () {
        return this._message;
    };
    Commit.prototype.withMessage = function (message) {
        this._message = message;
        return this;
    };
    /**
      * on - Commit -> Repo
      *
      * @returns {Repo}
      */
    Commit.prototype.on = function () {
        return this._on;
    };
    Commit.prototype.withOn = function (on) {
        this._on = on;
        return this;
    };
    /**
      * resolves - Commit -> Issue
      *
      * @returns {Issue[]}
      */
    Commit.prototype.resolves = function () {
        return this._resolves;
    };
    Commit.prototype.withResolves = function (resolves) {
        this._resolves = resolves;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Commit.prototype.sha = function () {
        return this._sha;
    };
    Commit.prototype.withSha = function (sha) {
        this._sha = sha;
        return this;
    };
    /**
      * startsPipeline - Commit -> Pipeline
      *
      * @returns {Pipeline[]}
      */
    Commit.prototype.startsPipeline = function () {
        return this._startsPipeline;
    };
    Commit.prototype.withStartsPipeline = function (startsPipeline) {
        this._startsPipeline = startsPipeline;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Commit.prototype.timestamp = function () {
        return this._timestamp;
    };
    Commit.prototype.withTimestamp = function (timestamp) {
        this._timestamp = timestamp;
        return this;
    };
    return Commit;
}());
exports.Commit = Commit;
