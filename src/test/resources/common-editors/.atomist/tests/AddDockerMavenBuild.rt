/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
scenario AddDockerMavenBuild should add the new files and entries for Docker

let pomFile = "pom.xml"

/*
 Nothing special about localhost:5000,
 Other than the fact it is the default for a local
 docker registry, see https://docs.docker.com/registry/deploying/
 */
let dockerRepository = "localhost:5000"

given
  ArchiveRoot

  pom.xml = """<project>
    <modelVersion>4.0.0</modelVersion>

    <groupId>atomist-project-editors</groupId>
    <artifactId>spring-boot-project</artifactId>
    <version>0.0.1</version>
    <packaging>jar</packaging>

    <name>spring-boot-project</name>
    <description>Atomist Spring Boot start project</description>

    <parent>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-parent</artifactId>
      <version>1.4.1.RELEASE</version>
      <relativePath /> <!-- lookup parent from repository -->
    </parent>

    <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <java.version>1.8</java.version>
      <timestamp>${maven.build.timestamp}</timestamp>
      <maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
    </properties>

    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <exclusions>
          <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-jetty</artifactId>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
      </dependency>
    </dependencies>

    <build>
      <plugins>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <executions>
            <execution>
              <goals>
                <goal>build-info</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>

  </project>
"""

when
  AddDockerMavenBuild

then
  fileContains pomFile "git-commit-id-plugin"
  and fileContains pomFile "docker-maven-plugin"
  and fileContains pomFile "maven-dependency-plugin"
  and fileExists "src/main/docker/Dockerfile"
  and fileContains pomFile dockerRepository
  and fileContains "README.md" "To run inside a docker container"


scenario AddDockerMavenBuild should not work on an empty project

let dockerRepository = "localhost:5000"

given
  Empty

when
  AddDockerMavenBuild

then
  NoChange
