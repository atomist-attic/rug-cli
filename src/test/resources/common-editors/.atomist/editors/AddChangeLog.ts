// Generated by Rug to TypeScript transpiler.

import { EditProject } from '@atomist/rug/operations/ProjectEditor'
import { PathExpressionEngine } from '@atomist/rug/tree/PathExpression'
import { Editor, Tags, Parameter } from '@atomist/rug/operations/Decorators'
import { Pattern } from '@atomist/rug/operations/RugOperation'
import { File, Project } from '@atomist/rug/model/Core'

/**
    AddChangeLog
    adds a new CHANGELOG
 */

@Editor("AddChangeLog", "adds a new CHANGELOG")
@Tags("changelog", "documentation")
class AddChangeLog implements EditProject {

    @Parameter({
        displayName: "Repo Slug",
        description: "GitHub repository slug of the form 'owner/name'",
        pattern: "^[-\\w.]+/[-\\w.]+$",
        validInput: "An existing Github repository slug of the form 'owner/repo', must be 3-100 characters long",
        minLength: 3,
        maxLength: 100
    })
    repo_slug: string;

    edit(project: Project) {

        let eng: PathExpressionEngine = project.context().pathExpressionEngine();

        let changelogTemplate = "empty-changelog.md";

        let changelog = "CHANGELOG.md";

        let p = project
        p.copyEditorBackingFileOrFail(changelogTemplate, changelog)
        eng.with<File>(p, `//File()[@name='${changelog}']`, f => {
            f.replace("{{repo_slug}}", this.repo_slug)
        })

    }

}
export let editor_addChangeLog = new AddChangeLog();