// Generated by Rug to TypeScript transpiler.

import { EditProject } from '@atomist/rug/operations/ProjectEditor'
import { PathExpressionEngine } from '@atomist/rug/tree/PathExpression'
import { Editor, Tags, Parameter } from '@atomist/rug/operations/Decorators'
import { Pattern } from '@atomist/rug/operations/RugOperation'
import { JavaType, Project } from '@atomist/rug/model/Core'

/**
    ClassRenamer
    renames a Java class, replacing one literal pattern with another
 */
@Editor("ClassRenamer", "renames a Java class, replacing one literal pattern with another")
@Tags("java")
class ClassRenamer implements EditProject {

    @Parameter({
        displayName: "Current Class Name",
        description: "Name of Java class to rename",
        pattern: Pattern.java_identifier,
        validInput: "A valid Java class name, which contains only alphanumeric characters, $ and _ and does not start with a number"
    })
    old_class: string

    @Parameter({
        displayName: "New Class Name",
        description: "New name for the Java class",
        pattern: Pattern.java_identifier,
        validInput: "A valid Java class name, which contains only alphanumeric characters, $ and _ and does not start with a number"
    })
    new_class: string

    edit(project: Project) {
        let eng: PathExpressionEngine = project.context.pathExpressionEngine
        eng.with<JavaType>(project, '//JavaType()', c => {
            if ( c.name.indexOf(this.old_class) >= 0 ) {
                c.renameByReplace(this.old_class, this.new_class)
            }
        })
        let p = project

        p.replace(this.old_class, this.new_class)
    }
}
export let editor_classRenamer = new ClassRenamer();