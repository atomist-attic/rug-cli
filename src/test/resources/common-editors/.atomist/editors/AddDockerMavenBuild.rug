/*
 * Copyright 2002-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@tag "java"
@tag "spring"
@description "Adds Maven infrastructure and source files to package and distribute project as a Docker Image"
editor AddDockerMavenBuild

precondition IsMaven

@description "Name of the docker repository to push artifacts to."
param dockerRepository: .*

AddGitMavenPlugin
AddDockerMavenPlugin
AddDockerMavenDependencyPlugin
AddDockerfile
AddReadmeDocumentation

with file f when path = "pom.xml"
  do replace "{{docker-repo}}" dockerRepository


editor AddDockerMavenDependencyPlugin

let mavenDependencyPlugin = """<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.10</version>
				<executions>
					<execution>
						<id>unpack</id>
						<phase>package</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>${project.artifactId}</artifactId>
									<version>${project.version}</version>
									<type>jar</type>
									<outputDirectory>${project.build.directory}/docker</outputDirectory>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>"""

with pom p when path = "pom.xml"
  do addOrReplaceBuildPlugin "org.apache.maven.plugins" "maven-dependency-plugin" mavenDependencyPlugin


editor AddDockerMavenPlugin

let dockerMavenPlugin = """<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.11</version>
				<configuration>
					<imageName>{{docker-repo}}/${project.name}</imageName>
					<dockerDirectory>src/main/docker</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<useConfigFile>true</useConfigFile>
					<imageTags>
						<imageTag>${project.version}</imageTag>
					</imageTags>
				</configuration>
			</plugin>"""

with pom p when path = "pom.xml"
  do addOrReplaceBuildPlugin "com.spotify" "docker-maven-plugin" dockerMavenPlugin


editor AddGitMavenPlugin

let gitPlugin = """<plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
            </plugin>"""

with pom p when path = "pom.xml"
  do addOrReplaceBuildPlugin "pl.project13.maven" "git-commit-id-plugin" gitPlugin


editor AddDockerfile

let template = "Dockerfile.vm"

with project p
  do merge template to "src/main/docker/Dockerfile"


editor AddReadmeDocumentation

let dockerReadmeDocs = """
To run inside a docker container
--------------------------------

You can now build, package and run this microservice using Docker.

Now you can build your docker image by entering from a terminal where you have access to Docker, execute the following command:

```shell
> ./mvnw clean package docker:build
```

Even push it to a repository of your choice:

```shell
> ./mvnw clean package docker:build -DpushImage
```
"""

with file f when path = "README.md"
  do append dockerReadmeDocs
