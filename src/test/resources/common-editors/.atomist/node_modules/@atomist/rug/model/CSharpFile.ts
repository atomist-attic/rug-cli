/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {TreeNode,FormatInfo,PathExpressionEngine} from '../tree/PathExpression'
import {ProjectContext} from '../operations/ProjectEditor' 


/*
 * C# file
 */
interface CSharpFile extends TreeNode {

    /**
      * Add a using if it isn't already present
      *
      * @param newUsing {string} New using (just the package)
      */
    addUsing(newUsing: string): void

    /**
      * Append
      *
      * @param arg0 {string} 
      */
    append(arg0: string): void

    /**
      * Children
      *
      * @returns {any[]}
      */
    children(): any[]

    /**
      * Cause the operation to fail with a fatal error
      *
      * @param msg {string} The message to be displayed
      */
    fail(msg: string): void

    /**
      * Return the format info for the start of this structure in the file or null if not available
      *
      * @returns {FormatInfo}
      */
    formatInfo(): FormatInfo

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeTags(): string[]

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeType(): string[]

    /**
      * Cause the editor to print to the console. Useful for debugging if running editors locally.
      *
      * @param msg {string} The message to be displayed
      */
    println(msg: string): void

    /**
      * Set the value of the given key
      *
      * @param key {string} The match key whose content you want
      * @param value {string} The new value
      */
    set(key: string, value: string): void

    /**
      * Update the whole value
      *
      * @param arg0 {string} 
      */
    update(arg0: string): void

    /**
      * Value
      *
      * @returns {string}
      */
    value(): string

    /**
      * Return the value of the given key
      *
      * @param name {string} The match key whose content you want
      * @returns {any}
      */
    valueOf(name: string): any

}   

export {CSharpFile}
