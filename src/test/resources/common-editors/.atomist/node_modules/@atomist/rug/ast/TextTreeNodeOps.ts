import {PathExpressionEngine,TextTreeNode} from "../tree/PathExpression"
import {AstHelper} from "./AstHelper"
import {TreeHelper} from "../tree/TreeHelper"

import {File} from "../model/Core"

let treeHelper = new TreeHelper()

/** 
 * Base class for decorators on node.
 * Allows us to get to the containing File and update text.
 * Extended by specific classes, but also mixed in on its
 * own if we don't find a specific class.
 */
export class TextTreeNodeOps<N extends TextTreeNode> {

    protected astHelper: AstHelper

    constructor(protected node: N, public pexe: PathExpressionEngine) {
        this.astHelper = new AstHelper(pexe)
    }

    /**
     * Delete this node.
     */
    delete() {
        this.node.update("")
    }

    /**
     * Append the given value to the content of this node.
     * Include whitespace or newline if you want it.
     */
    append(what: string) {
        this.node.update(`${this.node.value()}${what}`)
    }

    /**
     * Prepend the given value to the content of this node.
     * Include whitespace or newline if you want it.
     */
    prepend(what: string) {
        this.node.update(`${what}${this.node.value()}`)
    }

    /**
     * Return the file this node is contained in.
     */
    containingFile(): File {
       return treeHelper.findAncestorWithTag<File>(this.node, "File")
    }

}