/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {TreeNode,FormatInfo,PathExpressionEngine} from '../tree/PathExpression'
import {ProjectContext} from '../operations/ProjectEditor' 


/*
 * Java properties file
 */
interface Properties extends TreeNode {

    /**
      * Children
      *
      * @returns {any[]}
      */
    children(): any[]

    /**
      * Return whether a property key exists in this file or not
      *
      * @param key {string} The key of the property being searched for
      * @returns {boolean}
      */
    containsKey(key: string): boolean

    /**
      * Return whether a property value exists in this file or not
      *
      * @param value {string} The value being searched for
      * @returns {boolean}
      */
    containsValue(value: string): boolean

    /**
      * Return file content
      *
      * @returns {string}
      */
    content(): string

    /**
      * Cause the operation to fail with a fatal error
      *
      * @param msg {string} The message to be displayed
      */
    fail(msg: string): void

    /**
      * Return file name, excluding path
      *
      * @returns {string}
      */
    filename(): string

    /**
      * Return the content of this property
      *
      * @param key {string} The name of the simple node
      * @returns {string}
      */
    getValue(key: string): string

    /**
      * Is this file well-formed?
      *
      * @returns {boolean}
      */
    isWellFormed(): boolean

    /**
      * Return a list of the supported keys
      *
      * @returns {any[]}
      */
    keys(): any[]

    /**
      * Return the number of lines in the file
      *
      * @returns {number}
      */
    lineCount(): number

    /**
      * Make the file executable
      *
      */
    makeExecutable(): void

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeTags(): string[]

    /**
      * Tags attached to the node
      *
      * @returns {string[]}
      */
    nodeType(): string[]

    /**
      * Return file path, with forward slashes
      *
      * @returns {string}
      */
    path(): string

    /**
      * Return the file's permissions
      *
      * @returns {number}
      */
    permissions(): number

    /**
      * Cause the editor to print to the console. Useful for debugging if running editors locally.
      *
      * @param msg {string} The message to be displayed
      */
    println(msg: string): void

    /**
      * Set the value of the specified property, creating a property if not present
      *
      * @param key {string} The key of the property being set
      * @param value {string} The value of the property
      */
    setProperty(key: string, value: string): void

    /**
      * Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /
      *
      * @param root {string} The root path to begin searching from
      * @returns {boolean}
      */
    underPath(root: string): boolean

}   

export {Properties}
