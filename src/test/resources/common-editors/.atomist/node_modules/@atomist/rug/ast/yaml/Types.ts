import {TextTreeNode} from "../../tree/PathExpression";

/**
 * Extended by classes that know how to handle YAML strings or sequences.
 */
export interface YamlStringOps {

    /**
     * Returns the actual text, not the raw value,
     * which may contain quotes etc.
     */
    text(): string

    /**
     * Update the actual text, taking care of quotes, newlines etc.
     */
    updateText(to: string): void
}

export type YamlString = YamlStringOps & TextTreeNode

/**
 * String without quotes or newlines. Leave it alone.
 */
export class YamlRawValue implements YamlStringOps {

    constructor(private node: TextTreeNode) {
    }

    text() {
        return this.node.value()
    }

    updateText(to: string) {
        this.node.update(to)
    }
}

/**
 * String enclosed in "". Simply strips them.
 */
export class YamlQuotedValue implements YamlStringOps {

    constructor(private node: TextTreeNode) {
    }

    text() {
        return this.node.value().slice(1, this.node.value().length - 1)
    }

    updateText(to: string) {
        let newValue = `"${to}"`
        // console.log(`Update from [${this.node.value()}] to [${newValue}]`)
        this.node.update(newValue)
    }
}

/**
 * String using >. Strip newlines.
 */
export class YamlFoldedBlockScalar implements YamlStringOps {

    // Indent for each line
    private indent: string
    private leading: string

    constructor(private node: TextTreeNode) {
        let raw = node.value()
        if (raw.charAt(0) != '>') throw new Error("Illegal argument: Must begin with >")
        if (raw.charAt(1) != '\n') throw new Error("Illegal argument: Must begin with >\n")
        let index = 2
        let ch = raw.charAt(index)
        while (ch == ' ' || ch == '\t' || ch == '\n') {
            ch = raw.charAt(++index)
        }
        this.leading = raw.substr(0, index)
        this.indent = this.leading.substring(2)
    }

    text() {
        return this.node.value().substr(this.leading.length)
                .replace(new RegExp('^' + this.indent, 'mg'), '')
                .replace(new RegExp('\n+$'), '')
                .replace(new RegExp('([^\n])\n([^\n])', 'g'), '$1 $2')
                .replace(new RegExp('\n\n', 'g'), '\n') + '\n'
    }

    updateText(to: string) {
        let newValue = `${this.leading}${to}`
        // console.log(`Update from [${this.node.value()}] to [${newValue}]`)
        this.node.update(newValue)
    }
}

/**
 * String using >-.
 */
export class YamlFoldedBlockWithStripChomping implements YamlStringOps {

    // Indent for each line
    private indent: string
    private leading: string

    constructor(private node: TextTreeNode) {
        let raw = node.value()
        if (raw.charAt(0) != '>' && raw.charAt(1) != '-') throw new Error("Illegal argument: Must begin with >-")
        if (raw.charAt(2) != '\n') throw new Error("Illegal argument: Must begin with >-\n")
        let index = 3
        let ch = raw.charAt(index)
        while (ch == ' ' || ch == '\t' || ch == '\n') {
            ch = raw.charAt(++index)
        }
        this.leading = raw.substr(0, index)
        this.indent = this.leading.substring(3)
    }

    text() {
        return this.node.value().substr(this.leading.length)
                .replace(new RegExp('^' + this.indent, 'mg'), '')
                .replace(new RegExp('\n+$'), '')
                .replace(new RegExp('([^\n])\n([^\n])', 'g'), '$1 $2')
                .replace(new RegExp('\n\n', 'g'), '\n')
    }

    updateText(to: string) {
        let newValue = `${this.leading}${to}`
        // console.log(`Update from [${this.node.value()}] to [${newValue}]`)
        this.node.update(newValue)
    }
}

/**
 * String using >+.
 */
export class YamlFoldedBlockWithKeepChomping implements YamlStringOps {

    // Indent for each line
    private indent: string
    private leading: string

    constructor(private node: TextTreeNode) {
        let raw = node.value()
        if (raw.charAt(0) != '>' && raw.charAt(1) != '+') throw new Error("Illegal argument: Must begin with >+")
        if (raw.charAt(2) != '\n') throw new Error("Illegal argument: Must begin with >+\n")
        let index = 3
        let ch = raw.charAt(index)
        while (ch == ' ' || ch == '\t' || ch == '\n') {
            ch = raw.charAt(++index)
        }
        this.leading = raw.substr(0, index)
        this.indent = this.leading.substring(3)
    }

    text() {
        let raw = this.node.value();
        let newlines = raw.match(new RegExp('\n+$'))
        return raw.substr(this.leading.length)
                .replace(new RegExp('^' + this.indent, 'mg'), '')
                .replace(new RegExp('\n+$'), '')
                .replace(new RegExp('([^\n])\n([^\n])', 'g'), '$1 $2')
                .replace(new RegExp('\n\n', 'g'), '\n')
                + newlines[0].toString()
    }

    updateText(to: string) {
        let newValue = `${this.leading}${to}`
        // console.log(`Update from [${this.node.value()}] to [${newValue}]`)
        this.node.update(newValue)
    }
}

/**
 * String using |. Maintain newlines.
 */
export class YamlLiteralBlockScalar implements YamlStringOps {

    // Indent for each line
    private indent: string
    private leading: string

    constructor(private node: TextTreeNode) {
        let raw = node.value()
        if (raw.charAt(0) != '|') throw new Error("Illegal argument: Must begin with |")
        if (raw.charAt(1) != '\n') throw new Error("Illegal argument: Must begin with |\n")
        let index = 2
        let ch = raw.charAt(index)
        while (ch == ' ' || ch == '\t' || ch == '\n') {
            ch = raw.charAt(++index)
        }
        this.leading = raw.substr(0, index)
        this.indent = this.leading.substring(2)
    }

    text() {
        return this.node.value().substr(this.leading.length)
            .replace(new RegExp('^' + this.indent, 'mg'), '')
            .replace(new RegExp('\n+$'), '\n')
    }

    updateText(to: string) {
        let newValue = `${this.leading}${to}`
        // console.log(`Update from [${this.node.value()}] to [${newValue}]`)
        this.node.update(newValue)
    }
}

/**
 * String using |-.
 */
export class YamlLiteralBlockWithStripChomping implements YamlStringOps {

    // Indent for each line
    private indent: string
    private leading: string

    constructor(private node: TextTreeNode) {
        let raw = node.value()
        if (raw.charAt(0) != '|' && raw.charAt(1) != '-') throw new Error("Illegal argument: Must begin with |-")
        if (raw.charAt(2) != '\n') throw new Error("Illegal argument: Must begin with |-\n")
        let index = 3
        let ch = raw.charAt(index)
        while (ch == ' ' || ch == '\t' || ch == '\n') {
            ch = raw.charAt(++index)
        }
        this.leading = raw.substr(0, index)
        this.indent = this.leading.substring(3)
    }

    text() {
        return this.node.value().substr(this.leading.length)
            .replace(new RegExp('^' + this.indent, 'mg'), '')
            .replace(new RegExp('\n+$'), '')
    }

    updateText(to: string) {
        let newValue = `${this.leading}${to}`
        // console.log(`Update from [${this.node.value()}] to [${newValue}]`)
        this.node.update(newValue)
    }
}

/**
 * String using |+.
 */
export class YamlLiteralBlockWithKeepChomping implements YamlStringOps {

    // Indent for each line
    private indent: string
    private leading: string

    constructor(private node: TextTreeNode) {
        let raw = node.value()
        if (raw.charAt(0) != '|' && raw.charAt(1) != '+') throw new Error("Illegal argument: Must begin with |+")
        if (raw.charAt(2) != '\n') throw new Error("Illegal argument: Must begin with |+\n")
        let index = 3
        let ch = raw.charAt(index)
        while (ch == ' ' || ch == '\t' || ch == '\n') {
            ch = raw.charAt(++index)
        }
        this.leading = raw.substr(0, index)
        this.indent = this.leading.substring(3)
    }

    text() {
        let raw = this.node.value();
        let newlines = raw.match(new RegExp('\n+$'))
        return raw.substr(this.leading.length)
            .replace(new RegExp('^' + this.indent, 'mg'), '')
            .replace(new RegExp('\n+$'), '')
            + newlines[0].toString()
    }

    updateText(to: string) {
        let newValue = `${this.leading}${to}`
        // console.log(`Update from [${this.node.value()}] to [${newValue}]`)
        this.node.update(newValue)
    }
}

/**
 * Works with a raw node value to add and remove sequence elements, observing YAML formatting.
 */
export class YamlSequenceOps {

    private items: String[]

    constructor(private node: TextTreeNode) {
        this.items = node.value().trim().split('\n')
    }

    /**
     * Adds an element to a sequence.
     *
     * @param elem the new element
     */
    addElement(elem: string) {
        let lastItem = this.items[this.items.length - 1]
        this.items.push(lastItem.substring(0, lastItem.indexOf('-')) + '- ' + elem)
        let newValue = this.items.join('\n') + '\n'
        this.node.update(newValue)
        // console.log(this.node.value())
    }

    /**
     * Removes an element, if it exists, from a sequence.
     *
     * @param elem the element to remove
     */
    removeElement(elem: string) {
        let lastItem = this.items[this.items.length - 1]
        let index = this.items.indexOf(lastItem.substring(0, lastItem.indexOf('-')) + '- ' + elem)
        if (index > -1) {
            this.items.splice(index, 1)
            let newValue = this.items.join('\n') + '\n'
            this.node.update(newValue)
            // console.log(this.node.value())
        }
    }

    /**
     * Update a key.
     *
     * @param the new key name
     */
    updateKey(key: string) {
        this.node.update(key) // this currently only updates the value
    }
}

export type YamlSequence = YamlSequenceOps & TextTreeNode
