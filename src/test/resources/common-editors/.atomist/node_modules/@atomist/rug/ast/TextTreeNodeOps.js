"use strict";
var AstHelper_1 = require("./AstHelper");
var TreeHelper_1 = require("../tree/TreeHelper");
var treeHelper = new TreeHelper_1.TreeHelper();
/**
 * Base class for decorators on node.
 * Allows us to get to the containing File and update text.
 * Extended by specific classes, but also mixed in on its
 * own if we don't find a specific class.
 */
var TextTreeNodeOps = (function () {
    function TextTreeNodeOps(node, pexe) {
        this.node = node;
        this.pexe = pexe;
        this.astHelper = new AstHelper_1.AstHelper(pexe);
    }
    /**
     * Delete this node.
     */
    TextTreeNodeOps.prototype.delete = function () {
        this.node.update("");
    };
    /**
     * Append the given value to the content of this node.
     * Include whitespace or newline if you want it.
     */
    TextTreeNodeOps.prototype.append = function (what) {
        this.node.update("" + this.node.value() + what);
    };
    /**
     * Prepend the given value to the content of this node.
     * Include whitespace or newline if you want it.
     */
    TextTreeNodeOps.prototype.prepend = function (what) {
        this.node.update("" + what + this.node.value());
    };
    /**
     * Return the file this node is contained in.
     */
    TextTreeNodeOps.prototype.containingFile = function () {
        return treeHelper.findAncestorWithTag(this.node, "File");
    };
    return TextTreeNodeOps;
}());
exports.TextTreeNodeOps = TextTreeNodeOps;
