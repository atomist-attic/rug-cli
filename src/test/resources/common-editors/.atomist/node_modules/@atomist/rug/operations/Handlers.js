"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Respondable = (function () {
    function Respondable() {
    }
    return Respondable;
}());
exports.Respondable = Respondable;
var NonRespondable = (function () {
    function NonRespondable() {
    }
    return NonRespondable;
}());
exports.NonRespondable = NonRespondable;
var Presentable = (function () {
    function Presentable() {
    }
    return Presentable;
}());
exports.Presentable = Presentable;
var Status;
(function (Status) {
    Status[Status["failure"] = 0] = "failure";
    Status[Status["success"] = 1] = "success";
})(Status || (Status = {}));
/**
 * A bunch of stuff to do asynchronously
 * Messages got to the bot.
 * Rugs are run straight away
 */
var Plan = (function () {
    function Plan() {
        this.messages = [];
        this.instructions = [];
    }
    Plan.prototype.add = function (thing) {
        if (thing instanceof Message) {
            this.messages.push(thing);
        }
        else {
            this.instructions.push(thing);
        }
        return this;
    };
    Plan.ofMessage = function (m) {
        return new Plan().add(m);
    };
    return Plan;
}());
exports.Plan = Plan;
/**
 * Represents a Message to the bot.
 * Any rugs can contain unbound parameters, and the bot will try to fill them out
*/
var Message = (function () {
    function Message(about) {
        this.instructions = [];
        this.body = about;
    }
    Message.prototype.withCorrelationId = function (id) {
        this.correlationId = id;
        return this;
    };
    Message.prototype.withNode = function (node) {
        this.node = node;
        return this;
    };
    Message.prototype.withChannelId = function (chid) {
        this.channelId = chid;
        return this;
    };
    Message.prototype.addAction = function (instruction) {
        this.instructions.push(instruction);
        return this;
    };
    return Message;
}());
exports.Message = Message;
var MappedParameters = (function () {
    function MappedParameters() {
    }
    return MappedParameters;
}());
MappedParameters.GITHUB_REPO_OWNER = "atomist://github/repository/owner";
MappedParameters.GITHUB_REPOSITORY = "atomist://github/repository";
MappedParameters.SLACK_CHANNEL = "atomist://slack/channel";
MappedParameters.SLACK_TEAM = "atomist://slack/team";
MappedParameters.SLACK_USER = "atomist://slack/user";
MappedParameters.GITHUB_WEBHOOK_URL = "atomist://github_webhook_url";
exports.MappedParameters = MappedParameters;
