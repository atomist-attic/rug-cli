"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TransformingPathExpressionEngine_1 = require("./TransformingPathExpressionEngine");
var TextTreeNodeOps_1 = require("../ast/TextTreeNodeOps");
/**
 * Tries to find an "Ops" class for the given node, and mix in
 * its methods with the node type methods. If an ops class can't
 * be found, mix in TextTreeNodeOps.
 */
var DecoratingPathExpressionEngine = (function (_super) {
    __extends(DecoratingPathExpressionEngine, _super);
    function DecoratingPathExpressionEngine(delegate) {
        var _this = _super.call(this, delegate, function (n) {
            // Also need to parameterize module
            var ops = null;
            try {
                ops = _this.decoratorFor(n);
            }
            catch (e) {
                // Not an error: We didn't find a specific decorator class.
                // Fall back to TextTreeNodeOps, which adds convenience operations.
                //console.log(`Can't find specific decorator for node named ${n.nodeName()}: Expected class name=${this.decoratorClassName(n)}`)
                ops = new TextTreeNodeOps_1.TextTreeNodeOps(n, delegate);
            }
            var combined = _this.unify(n, ops);
            //console.log(`ops=${ops}, combined=${combined}`)
            return combined;
        }) || this;
        return _this;
    }
    /**
     * Add all functions from right to left.
     * Also copies state, which is needed for methods to work.
     */
    DecoratingPathExpressionEngine.prototype.unify = function (base, enricher) {
        var monkeyableBase = base;
        for (var id in enricher) {
            var fun = enricher[id];
            monkeyableBase[id] = fun;
        }
        return monkeyableBase;
    };
    /**
     * Convenience method returning the conventional decorator
     * class name for the node name. Simply adds "Ops" suffix.
     */
    DecoratingPathExpressionEngine.prototype.decoratorClassName = function (n) {
        return n.nodeName().charAt(0).toUpperCase() + n.nodeName().substr(1) + "Ops";
    };
    return DecoratingPathExpressionEngine;
}(TransformingPathExpressionEngine_1.TransformingPathExpressionEngine));
exports.DecoratingPathExpressionEngine = DecoratingPathExpressionEngine;
