"use strict";
//used by annotation functions
function set_metadata(obj, key, value) {
    Object.defineProperty(obj, key, { value: value, writable: false, enumerable: true });
}
function get_metadata(obj, key) {
    var desc = Object.getOwnPropertyDescriptor(obj, key);
    if ((desc == null || desc == undefined) && (obj.prototype != undefined)) {
        desc = Object.getOwnPropertyDescriptor(obj.prototype, key);
    }
    if (desc != null || desc != undefined) {
        return desc.value;
    }
    return null;
}
/**
* Decorator for parameters. Adds to object properties
*/
function Parameter(details) {
    return function (target, propertyKey) {
        var params = get_metadata(target, "__parameters");
        if (params == null) {
            params = [];
        }
        details["name"] = propertyKey;
        details["decorated"] = true;
        params.push(details);
        set_metadata(target, "__parameters", params);
    };
}
exports.Parameter = Parameter;
/**
* Decorator for editors. Use this intead of implementing the editor interface.
*/
function ruglike(kind) {
    return function (name, description) {
        return function (ctr) {
            if (typeof ctr.prototype[kind] !== "function") {
                throw new Error(kind + " must be function that takes a Project as its first argument.");
            }
            ctr.prototype["__name"] = name;
            ctr.prototype["__description"] = description;
        };
    };
}
var Generator = ruglike("populate");
exports.Generator = Generator;
var Reviewer = ruglike("review");
exports.Reviewer = Reviewer;
var Editor = ruglike("edit");
exports.Editor = Editor;
/**
* Decorator for tags. Sets tags on the class
*/
function Tags() {
    var tags = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        tags[_i] = arguments[_i];
    }
    return function (target) {
        target.prototype["__tags"] = tags;
    };
}
exports.Tags = Tags;
