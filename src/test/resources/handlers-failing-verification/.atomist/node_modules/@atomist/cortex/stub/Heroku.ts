/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../Heroku";
import { Commit } from "./Commit";
export { Heroku };

/*
 * Type Heroku
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class Heroku implements api.Heroku {

    private _app: string;
    private _deploys: Commit[];
    private _release: string;
    private _timestamp: string;
    private _url: string;
    private _user: string;

    nodeName(): string {
        return "Heroku";
    }

    nodeTags(): string[] {
        return [ "Heroku", "-dynamic" ];
    }

    /**
      * String
      *
      * @returns {string}
      */
    app(): string {
        return this._app;
    }

    withApp(app: string): Heroku {
        this._app = app;
        return this;
    }

    /**
      * deploys - Heroku -> Commit
      *
      * @returns {Commit[]}
      */
    deploys(): Commit[] {
        return this._deploys;
    }

    withDeploys(deploys: Commit[]): Heroku {
        this._deploys = deploys;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    release(): string {
        return this._release;
    }

    withRelease(release: string): Heroku {
        this._release = release;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    timestamp(): string {
        return this._timestamp;
    }

    withTimestamp(timestamp: string): Heroku {
        this._timestamp = timestamp;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    url(): string {
        return this._url;
    }

    withUrl(url: string): Heroku {
        this._url = url;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    user(): string {
        return this._user;
    }

    withUser(user: string): Heroku {
        this._user = user;
        return this;
    }

}   

