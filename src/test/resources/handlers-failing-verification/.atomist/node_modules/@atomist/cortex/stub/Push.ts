/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../Push";
import { Build } from "./Build";
import { Commit } from "./Commit";
export { Push };

/*
 * Type Push
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class Push implements api.Push {

    private _after: Commit;
    private _before: Commit;
    private _branch: string;
    private _contains: Commit[];
    private _timestamp: string;
    private _triggeredBuild: Build[];

    nodeName(): string {
        return "Push";
    }

    nodeTags(): string[] {
        return [ "Push", "-dynamic" ];
    }

    /**
      * after - Push -> Commit
      *
      * @returns {Commit}
      */
    after(): Commit {
        return this._after;
    }

    withAfter(after: Commit): Push {
        this._after = after;
        return this;
    }

    /**
      * before - Push -> Commit
      *
      * @returns {Commit}
      */
    before(): Commit {
        return this._before;
    }

    withBefore(before: Commit): Push {
        this._before = before;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    branch(): string {
        return this._branch;
    }

    withBranch(branch: string): Push {
        this._branch = branch;
        return this;
    }

    /**
      * contains - Push -> Commit
      *
      * @returns {Commit[]}
      */
    contains(): Commit[] {
        return this._contains;
    }

    withContains(contains: Commit[]): Push {
        this._contains = contains;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    timestamp(): string {
        return this._timestamp;
    }

    withTimestamp(timestamp: string): Push {
        this._timestamp = timestamp;
        return this;
    }

    /**
      * triggeredBuild - Push -> Build
      *
      * @returns {Build[]}
      */
    triggeredBuild(): Build[] {
        return this._triggeredBuild;
    }

    withTriggeredBuild(triggeredBuild: Build[]): Push {
        this._triggeredBuild = triggeredBuild;
        return this;
    }

}   

