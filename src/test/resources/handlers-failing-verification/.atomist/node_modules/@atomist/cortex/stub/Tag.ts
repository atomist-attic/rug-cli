/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../Tag";
import { Commit } from "./Commit";
import { Container } from "./Container";
import { Release } from "./Release";
export { Tag };

/*
 * Type Tag
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class Tag implements api.Tag {

    private _description: string;
    private _name: string;
    private _onCommit: Commit;
    private _onContainer: Container;
    private _ref: string;
    private _releasedBy: Release;
    private _timestamp: string;

    nodeName(): string {
        return "Tag";
    }

    nodeTags(): string[] {
        return [ "Tag", "-dynamic" ];
    }

    /**
      * String
      *
      * @returns {string}
      */
    description(): string {
        return this._description;
    }

    withDescription(description: string): Tag {
        this._description = description;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    name(): string {
        return this._name;
    }

    withName(name: string): Tag {
        this._name = name;
        return this;
    }

    /**
      * onCommit - Tag -> Commit
      *
      * @returns {Commit}
      */
    onCommit(): Commit {
        return this._onCommit;
    }

    withOnCommit(onCommit: Commit): Tag {
        this._onCommit = onCommit;
        return this;
    }

    /**
      * onContainer - Tag -> Container
      *
      * @returns {Container}
      */
    onContainer(): Container {
        return this._onContainer;
    }

    withOnContainer(onContainer: Container): Tag {
        this._onContainer = onContainer;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    ref(): string {
        return this._ref;
    }

    withRef(ref: string): Tag {
        this._ref = ref;
        return this;
    }

    /**
      * releasedBy - Tag -> Release
      *
      * @returns {Release}
      */
    releasedBy(): Release {
        return this._releasedBy;
    }

    withReleasedBy(releasedBy: Release): Tag {
        this._releasedBy = releasedBy;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    timestamp(): string {
        return this._timestamp;
    }

    withTimestamp(timestamp: string): Tag {
        this._timestamp = timestamp;
        return this;
    }

}   

