/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../Comment";
import { GitHubId } from "./GitHubId";
import { Issue } from "./Issue";
import { PullRequest } from "./PullRequest";
export { Comment };

/*
 * Type Comment
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class Comment implements api.Comment {

    private _body: string;
    private _by: GitHubId;
    private _commentOn: PullRequest;
    private _id: string;
    private _on: Issue;
    private _timestamp: string;

    nodeName(): string {
        return "Comment";
    }

    nodeTags(): string[] {
        return [ "Comment", "-dynamic" ];
    }

    /**
      * String
      *
      * @returns {string}
      */
    body(): string {
        return this._body;
    }

    withBody(body: string): Comment {
        this._body = body;
        return this;
    }

    /**
      * by - Comment -> GitHubId
      *
      * @returns {GitHubId}
      */
    by(): GitHubId {
        return this._by;
    }

    withBy(by: GitHubId): Comment {
        this._by = by;
        return this;
    }

    /**
      * commentOn - Comment -> PullRequest
      *
      * @returns {PullRequest}
      */
    commentOn(): PullRequest {
        return this._commentOn;
    }

    withCommentOn(commentOn: PullRequest): Comment {
        this._commentOn = commentOn;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    id(): string {
        return this._id;
    }

    withId(id: string): Comment {
        this._id = id;
        return this;
    }

    /**
      * on - Comment -> Issue
      *
      * @returns {Issue}
      */
    on(): Issue {
        return this._on;
    }

    withOn(on: Issue): Comment {
        this._on = on;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    timestamp(): string {
        return this._timestamp;
    }

    withTimestamp(timestamp: string): Comment {
        this._timestamp = timestamp;
        return this;
    }

}   

