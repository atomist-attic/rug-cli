/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../Build";
import { Commit } from "./Commit";
import { Pipeline } from "./Pipeline";
import { PullRequest } from "./PullRequest";
import { Push } from "./Push";
import { Repo } from "./Repo";
export { Build };

/*
 * Type Build
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class Build implements api.Build {

    private _buildUrl: string;
    private _compareUrl: string;
    private _finishedAt: string;
    private _forPipeline: Pipeline;
    private _id: number;
    private _name: string;
    private _ofCommit: Commit;
    private _on: Repo;
    private _platform: string;
    private _pullRequestNumber: string;
    private _startedAt: string;
    private _status: string;
    private _timestamp: string;
    private _triggeredBy: Push;
    private _triggeredByPr: PullRequest;
    private _type: string;

    nodeName(): string {
        return "Build";
    }

    nodeTags(): string[] {
        return [ "Build", "-dynamic" ];
    }

    /**
      * String
      *
      * @returns {string}
      */
    buildUrl(): string {
        return this._buildUrl;
    }

    withBuildUrl(buildUrl: string): Build {
        this._buildUrl = buildUrl;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    compareUrl(): string {
        return this._compareUrl;
    }

    withCompareUrl(compareUrl: string): Build {
        this._compareUrl = compareUrl;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    finishedAt(): string {
        return this._finishedAt;
    }

    withFinishedAt(finishedAt: string): Build {
        this._finishedAt = finishedAt;
        return this;
    }

    /**
      * forPipeline - Build -> Pipeline
      *
      * @returns {Pipeline}
      */
    forPipeline(): Pipeline {
        return this._forPipeline;
    }

    withForPipeline(forPipeline: Pipeline): Build {
        this._forPipeline = forPipeline;
        return this;
    }

    /**
      * long
      *
      * @returns {number}
      */
    id(): number {
        return this._id;
    }

    withId(id: number): Build {
        this._id = id;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    name(): string {
        return this._name;
    }

    withName(name: string): Build {
        this._name = name;
        return this;
    }

    /**
      * ofCommit - Build -> Commit
      *
      * @returns {Commit}
      */
    ofCommit(): Commit {
        return this._ofCommit;
    }

    withOfCommit(ofCommit: Commit): Build {
        this._ofCommit = ofCommit;
        return this;
    }

    /**
      * on - Build -> Repo
      *
      * @returns {Repo}
      */
    on(): Repo {
        return this._on;
    }

    withOn(on: Repo): Build {
        this._on = on;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    platform(): string {
        return this._platform;
    }

    withPlatform(platform: string): Build {
        this._platform = platform;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    pullRequestNumber(): string {
        return this._pullRequestNumber;
    }

    withPullRequestNumber(pullRequestNumber: string): Build {
        this._pullRequestNumber = pullRequestNumber;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    startedAt(): string {
        return this._startedAt;
    }

    withStartedAt(startedAt: string): Build {
        this._startedAt = startedAt;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    status(): string {
        return this._status;
    }

    withStatus(status: string): Build {
        this._status = status;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    timestamp(): string {
        return this._timestamp;
    }

    withTimestamp(timestamp: string): Build {
        this._timestamp = timestamp;
        return this;
    }

    /**
      * triggeredBy - Build -> Push
      *
      * @returns {Push}
      */
    triggeredBy(): Push {
        return this._triggeredBy;
    }

    withTriggeredBy(triggeredBy: Push): Build {
        this._triggeredBy = triggeredBy;
        return this;
    }

    /**
      * triggeredByPr - Build -> PullRequest
      *
      * @returns {PullRequest}
      */
    triggeredByPr(): PullRequest {
        return this._triggeredByPr;
    }

    withTriggeredByPr(triggeredByPr: PullRequest): Build {
        this._triggeredByPr = triggeredByPr;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    type(): string {
        return this._type;
    }

    withType(type: string): Build {
        this._type = type;
        return this;
    }

}   

