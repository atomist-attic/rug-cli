/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../Commit";
import { Build } from "./Build";
import { Delta } from "./Delta";
import { GitHubId } from "./GitHubId";
import { Heroku } from "./Heroku";
import { Issue } from "./Issue";
import { Pipeline } from "./Pipeline";
import { Repo } from "./Repo";
import { Tag } from "./Tag";
export { Commit };

/*
 * Type Commit
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class Commit implements api.Commit {

    private _author: GitHubId;
    private _committer: GitHubId;
    private _deployedToHeroku: Heroku;
    private _hasBuild: Build[];
    private _includes: Delta[];
    private _isTagged: Tag[];
    private _message: string;
    private _on: Repo;
    private _resolves: Issue[];
    private _sha: string;
    private _startsPipeline: Pipeline[];
    private _timestamp: string;

    nodeName(): string {
        return "Commit";
    }

    nodeTags(): string[] {
        return [ "Commit", "-dynamic" ];
    }

    /**
      * author - Commit -> GitHubId
      *
      * @returns {GitHubId}
      */
    author(): GitHubId {
        return this._author;
    }

    withAuthor(author: GitHubId): Commit {
        this._author = author;
        return this;
    }

    /**
      * committer - Commit -> GitHubId
      *
      * @returns {GitHubId}
      */
    committer(): GitHubId {
        return this._committer;
    }

    withCommitter(committer: GitHubId): Commit {
        this._committer = committer;
        return this;
    }

    /**
      * deployedToHeroku - Commit -> Heroku
      *
      * @returns {Heroku}
      */
    deployedToHeroku(): Heroku {
        return this._deployedToHeroku;
    }

    withDeployedToHeroku(deployedToHeroku: Heroku): Commit {
        this._deployedToHeroku = deployedToHeroku;
        return this;
    }

    /**
      * hasBuild - Commit -> Build
      *
      * @returns {Build[]}
      */
    hasBuild(): Build[] {
        return this._hasBuild;
    }

    withHasBuild(hasBuild: Build[]): Commit {
        this._hasBuild = hasBuild;
        return this;
    }

    /**
      * includes - Commit -> Delta
      *
      * @returns {Delta[]}
      */
    includes(): Delta[] {
        return this._includes;
    }

    withIncludes(includes: Delta[]): Commit {
        this._includes = includes;
        return this;
    }

    /**
      * isTagged - Commit -> Tag
      *
      * @returns {Tag[]}
      */
    isTagged(): Tag[] {
        return this._isTagged;
    }

    withIsTagged(isTagged: Tag[]): Commit {
        this._isTagged = isTagged;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    message(): string {
        return this._message;
    }

    withMessage(message: string): Commit {
        this._message = message;
        return this;
    }

    /**
      * on - Commit -> Repo
      *
      * @returns {Repo}
      */
    on(): Repo {
        return this._on;
    }

    withOn(on: Repo): Commit {
        this._on = on;
        return this;
    }

    /**
      * resolves - Commit -> Issue
      *
      * @returns {Issue[]}
      */
    resolves(): Issue[] {
        return this._resolves;
    }

    withResolves(resolves: Issue[]): Commit {
        this._resolves = resolves;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    sha(): string {
        return this._sha;
    }

    withSha(sha: string): Commit {
        this._sha = sha;
        return this;
    }

    /**
      * startsPipeline - Commit -> Pipeline
      *
      * @returns {Pipeline[]}
      */
    startsPipeline(): Pipeline[] {
        return this._startsPipeline;
    }

    withStartsPipeline(startsPipeline: Pipeline[]): Commit {
        this._startsPipeline = startsPipeline;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    timestamp(): string {
        return this._timestamp;
    }

    withTimestamp(timestamp: string): Commit {
        this._timestamp = timestamp;
        return this;
    }

}   

