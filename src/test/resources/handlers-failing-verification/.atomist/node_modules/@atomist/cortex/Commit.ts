/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { TreeNode, GraphNode, FormatInfo, PathExpressionEngine } from "@atomist/rug/tree/PathExpression";
import { ProjectContext } from "@atomist/rug/operations/ProjectEditor";
import { Build } from "./Build";
import { Delta } from "./Delta";
import { GitHubId } from "./GitHubId";
import { Heroku } from "./Heroku";
import { Issue } from "./Issue";
import { Pipeline } from "./Pipeline";
import { Repo } from "./Repo";
import { Tag } from "./Tag";
export { Commit };

/*
 * Type Commit
 */
interface Commit extends GraphNode {

    /**
      * author - Commit -> GitHubId
      *
      * @returns {GitHubId}
      */
    author(): GitHubId;

    /**
      * committer - Commit -> GitHubId
      *
      * @returns {GitHubId}
      */
    committer(): GitHubId;

    /**
      * deployedToHeroku - Commit -> Heroku
      *
      * @returns {Heroku}
      */
    deployedToHeroku(): Heroku;

    /**
      * hasBuild - Commit -> Build
      *
      * @returns {Build[]}
      */
    hasBuild(): Build[];

    /**
      * includes - Commit -> Delta
      *
      * @returns {Delta[]}
      */
    includes(): Delta[];

    /**
      * isTagged - Commit -> Tag
      *
      * @returns {Tag[]}
      */
    isTagged(): Tag[];

    /**
      * String
      *
      * @returns {string}
      */
    message(): string;

    /**
      * on - Commit -> Repo
      *
      * @returns {Repo}
      */
    on(): Repo;

    /**
      * resolves - Commit -> Issue
      *
      * @returns {Issue[]}
      */
    resolves(): Issue[];

    /**
      * String
      *
      * @returns {string}
      */
    sha(): string;

    /**
      * startsPipeline - Commit -> Pipeline
      *
      * @returns {Pipeline[]}
      */
    startsPipeline(): Pipeline[];

    /**
      * String
      *
      * @returns {string}
      */
    timestamp(): string;

}   

