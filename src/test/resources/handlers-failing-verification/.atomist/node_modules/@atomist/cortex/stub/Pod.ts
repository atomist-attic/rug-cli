/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { GraphNode } from "@atomist/rug/tree/PathExpression";
import * as api from "../Pod";
import { Container } from "./Container";
import { Spec } from "./Spec";
export { Pod };

/*
 * Type Pod
 * 
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
class Pod implements api.Pod {

    private _createdBy: Spec;
    private _name: string;
    private _state: string;
    private _timestamp: string;
    private _uses: Container;

    nodeName(): string {
        return "Pod";
    }

    nodeTags(): string[] {
        return [ "Pod", "-dynamic" ];
    }

    /**
      * createdBy - Pod -> Spec
      *
      * @returns {Spec}
      */
    createdBy(): Spec {
        return this._createdBy;
    }

    withCreatedBy(createdBy: Spec): Pod {
        this._createdBy = createdBy;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    name(): string {
        return this._name;
    }

    withName(name: string): Pod {
        this._name = name;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    state(): string {
        return this._state;
    }

    withState(state: string): Pod {
        this._state = state;
        return this;
    }

    /**
      * String
      *
      * @returns {string}
      */
    timestamp(): string {
        return this._timestamp;
    }

    withTimestamp(timestamp: string): Pod {
        this._timestamp = timestamp;
        return this;
    }

    /**
      * uses - Pod -> Container
      *
      * @returns {Container}
      */
    uses(): Container {
        return this._uses;
    }

    withUses(uses: Container): Pod {
        this._uses = uses;
        return this;
    }

}   

