/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/*
 * Type Pipeline
 *
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
var Pipeline = (function () {
    function Pipeline() {
    }
    Pipeline.prototype.nodeName = function () {
        return "Pipeline";
    };
    Pipeline.prototype.nodeTags = function () {
        return ["Pipeline", "-dynamic"];
    };
    /**
      * String
      *
      * @returns {string}
      */
    Pipeline.prototype.application = function () {
        return this._application;
    };
    Pipeline.prototype.withApplication = function (application) {
        this._application = application;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Pipeline.prototype.eventType = function () {
        return this._eventType;
    };
    Pipeline.prototype.withEventType = function (eventType) {
        this._eventType = eventType;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Pipeline.prototype.executionId = function () {
        return this._executionId;
    };
    Pipeline.prototype.withExecutionId = function (executionId) {
        this._executionId = executionId;
        return this;
    };
    /**
      * has - Pipeline -> Stage
      *
      * @returns {Stage[]}
      */
    Pipeline.prototype.has = function () {
        return this._has;
    };
    Pipeline.prototype.withHas = function (has) {
        this._has = has;
        return this;
    };
    /**
      * runs - Pipeline -> Build
      *
      * @returns {Build[]}
      */
    Pipeline.prototype.runs = function () {
        return this._runs;
    };
    Pipeline.prototype.withRuns = function (runs) {
        this._runs = runs;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Pipeline.prototype.stageName = function () {
        return this._stageName;
    };
    Pipeline.prototype.withStageName = function (stageName) {
        this._stageName = stageName;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Pipeline.prototype.stageType = function () {
        return this._stageType;
    };
    Pipeline.prototype.withStageType = function (stageType) {
        this._stageType = stageType;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Pipeline.prototype.taskName = function () {
        return this._taskName;
    };
    Pipeline.prototype.withTaskName = function (taskName) {
        this._taskName = taskName;
        return this;
    };
    /**
      * triggeredBy - Pipeline -> Commit
      *
      * @returns {Commit}
      */
    Pipeline.prototype.triggeredBy = function () {
        return this._triggeredBy;
    };
    Pipeline.prototype.withTriggeredBy = function (triggeredBy) {
        this._triggeredBy = triggeredBy;
        return this;
    };
    /**
      * boolean
      *
      * @returns {boolean}
      */
    Pipeline.prototype.waitingForJudgement = function () {
        return this._waitingForJudgement;
    };
    Pipeline.prototype.withWaitingForJudgement = function (waitingForJudgement) {
        this._waitingForJudgement = waitingForJudgement;
        return this;
    };
    return Pipeline;
}());
exports.Pipeline = Pipeline;
