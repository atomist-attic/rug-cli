/*
 * Copyright 2015-2017 Atomist Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/*
 * Type Push
 *
 * Generated class exposing Atomist Cortex.
 * Fluent builder style class for use in testing and query by example.
 */
var Push = (function () {
    function Push() {
    }
    Push.prototype.nodeName = function () {
        return "Push";
    };
    Push.prototype.nodeTags = function () {
        return ["Push", "-dynamic"];
    };
    /**
      * after - Push -> Commit
      *
      * @returns {Commit}
      */
    Push.prototype.after = function () {
        return this._after;
    };
    Push.prototype.withAfter = function (after) {
        this._after = after;
        return this;
    };
    /**
      * before - Push -> Commit
      *
      * @returns {Commit}
      */
    Push.prototype.before = function () {
        return this._before;
    };
    Push.prototype.withBefore = function (before) {
        this._before = before;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Push.prototype.branch = function () {
        return this._branch;
    };
    Push.prototype.withBranch = function (branch) {
        this._branch = branch;
        return this;
    };
    /**
      * contains - Push -> Commit
      *
      * @returns {Commit[]}
      */
    Push.prototype.contains = function () {
        return this._contains;
    };
    Push.prototype.withContains = function (contains) {
        this._contains = contains;
        return this;
    };
    /**
      * String
      *
      * @returns {string}
      */
    Push.prototype.timestamp = function () {
        return this._timestamp;
    };
    Push.prototype.withTimestamp = function (timestamp) {
        this._timestamp = timestamp;
        return this;
    };
    /**
      * triggeredBuild - Push -> Build
      *
      * @returns {Build[]}
      */
    Push.prototype.triggeredBuild = function () {
        return this._triggeredBuild;
    };
    Push.prototype.withTriggeredBuild = function (triggeredBuild) {
        this._triggeredBuild = triggeredBuild;
        return this;
    };
    return Push;
}());
exports.Push = Push;
